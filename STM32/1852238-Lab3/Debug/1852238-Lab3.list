
1852238-Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080028ec  080028ec  000128ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029c0  080029c0  00020048  2**0
                  CONTENTS
  4 .ARM          00000000  080029c0  080029c0  00020048  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029c0  080029c0  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029c0  080029c0  000129c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029c4  080029c4  000129c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080029c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000048  08002a10  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  08002a10  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000964c  00000000  00000000  00020071  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b40  00000000  00000000  000296bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a48  00000000  00000000  0002b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000938  00000000  00000000  0002bc48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016ce1  00000000  00000000  0002c580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b91e  00000000  00000000  00043261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000822fc  00000000  00000000  0004eb7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0e7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002880  00000000  00000000  000d0ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000048 	.word	0x20000048
 8000128:	00000000 	.word	0x00000000
 800012c:	080028d4 	.word	0x080028d4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000004c 	.word	0x2000004c
 8000148:	080028d4 	.word	0x080028d4

0800014c <subKeyProcess>:
int TimerForKeyPress = 300;

int stop_hold = 0;

//This func do work when pressed
void subKeyProcess(int i) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch (i) {
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b02      	cmp	r3, #2
 8000158:	d079      	beq.n	800024e <subKeyProcess+0x102>
 800015a:	687b      	ldr	r3, [r7, #4]
 800015c:	2b02      	cmp	r3, #2
 800015e:	f300 80a3 	bgt.w	80002a8 <subKeyProcess+0x15c>
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d003      	beq.n	8000170 <subKeyProcess+0x24>
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2b01      	cmp	r3, #1
 800016c:	d05b      	beq.n	8000226 <subKeyProcess+0xda>
			green_time = temp;
			break;
		}
		break;
	}
}
 800016e:	e09b      	b.n	80002a8 <subKeyProcess+0x15c>
		if (button1_pressed_flag == 1) button1_pressed_flag = 0;
 8000170:	4b4f      	ldr	r3, [pc, #316]	; (80002b0 <subKeyProcess+0x164>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	2b01      	cmp	r3, #1
 8000176:	d102      	bne.n	800017e <subKeyProcess+0x32>
 8000178:	4b4d      	ldr	r3, [pc, #308]	; (80002b0 <subKeyProcess+0x164>)
 800017a:	2200      	movs	r2, #0
 800017c:	601a      	str	r2, [r3, #0]
		mode++;
 800017e:	4b4d      	ldr	r3, [pc, #308]	; (80002b4 <subKeyProcess+0x168>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	3301      	adds	r3, #1
 8000184:	4a4b      	ldr	r2, [pc, #300]	; (80002b4 <subKeyProcess+0x168>)
 8000186:	6013      	str	r3, [r2, #0]
		setTimer1(500);
 8000188:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800018c:	f000 ff06 	bl	8000f9c <setTimer1>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000190:	2201      	movs	r2, #1
 8000192:	2102      	movs	r1, #2
 8000194:	4848      	ldr	r0, [pc, #288]	; (80002b8 <subKeyProcess+0x16c>)
 8000196:	f001 fb74 	bl	8001882 <HAL_GPIO_WritePin>
		setTimer2(250);
 800019a:	20fa      	movs	r0, #250	; 0xfa
 800019c:	f000 ff18 	bl	8000fd0 <setTimer2>
		setTimer3(500);
 80001a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001a4:	f000 ff2e 	bl	8001004 <setTimer3>
		if (mode > 3) {
 80001a8:	4b42      	ldr	r3, [pc, #264]	; (80002b4 <subKeyProcess+0x168>)
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	2b03      	cmp	r3, #3
 80001ae:	dd06      	ble.n	80001be <subKeyProcess+0x72>
			mode = 0;
 80001b0:	4b40      	ldr	r3, [pc, #256]	; (80002b4 <subKeyProcess+0x168>)
 80001b2:	2200      	movs	r2, #0
 80001b4:	601a      	str	r2, [r3, #0]
			state = -1;
 80001b6:	4b41      	ldr	r3, [pc, #260]	; (80002bc <subKeyProcess+0x170>)
 80001b8:	f04f 32ff 	mov.w	r2, #4294967295
 80001bc:	601a      	str	r2, [r3, #0]
		if (mode != 0) {
 80001be:	4b3d      	ldr	r3, [pc, #244]	; (80002b4 <subKeyProcess+0x168>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d00b      	beq.n	80001de <subKeyProcess+0x92>
			  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET); //SEG0
 80001c6:	2200      	movs	r2, #0
 80001c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80001cc:	483a      	ldr	r0, [pc, #232]	; (80002b8 <subKeyProcess+0x16c>)
 80001ce:	f001 fb58 	bl	8001882 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);	//SEG1
 80001d2:	2201      	movs	r2, #1
 80001d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80001d8:	4837      	ldr	r0, [pc, #220]	; (80002b8 <subKeyProcess+0x16c>)
 80001da:	f001 fb52 	bl	8001882 <HAL_GPIO_WritePin>
		switch (mode) {
 80001de:	4b35      	ldr	r3, [pc, #212]	; (80002b4 <subKeyProcess+0x168>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b03      	cmp	r3, #3
 80001e4:	d85b      	bhi.n	800029e <subKeyProcess+0x152>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <subKeyProcess+0xa0>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	080001fd 	.word	0x080001fd
 80001f0:	08000207 	.word	0x08000207
 80001f4:	08000211 	.word	0x08000211
 80001f8:	0800021b 	.word	0x0800021b
			temp = red_time;
 80001fc:	4b30      	ldr	r3, [pc, #192]	; (80002c0 <subKeyProcess+0x174>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	4a30      	ldr	r2, [pc, #192]	; (80002c4 <subKeyProcess+0x178>)
 8000202:	6013      	str	r3, [r2, #0]
			break;
 8000204:	e00e      	b.n	8000224 <subKeyProcess+0xd8>
			temp = red_time;
 8000206:	4b2e      	ldr	r3, [pc, #184]	; (80002c0 <subKeyProcess+0x174>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a2e      	ldr	r2, [pc, #184]	; (80002c4 <subKeyProcess+0x178>)
 800020c:	6013      	str	r3, [r2, #0]
			break;
 800020e:	e009      	b.n	8000224 <subKeyProcess+0xd8>
			temp = yellow_time;
 8000210:	4b2d      	ldr	r3, [pc, #180]	; (80002c8 <subKeyProcess+0x17c>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a2b      	ldr	r2, [pc, #172]	; (80002c4 <subKeyProcess+0x178>)
 8000216:	6013      	str	r3, [r2, #0]
			break;
 8000218:	e004      	b.n	8000224 <subKeyProcess+0xd8>
			temp = green_time;
 800021a:	4b2c      	ldr	r3, [pc, #176]	; (80002cc <subKeyProcess+0x180>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	4a29      	ldr	r2, [pc, #164]	; (80002c4 <subKeyProcess+0x178>)
 8000220:	6013      	str	r3, [r2, #0]
			break;
 8000222:	bf00      	nop
		break;
 8000224:	e03b      	b.n	800029e <subKeyProcess+0x152>
		if (button2_pressed_flag == 1) button2_pressed_flag = 0;
 8000226:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <subKeyProcess+0x184>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d102      	bne.n	8000234 <subKeyProcess+0xe8>
 800022e:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <subKeyProcess+0x184>)
 8000230:	2200      	movs	r2, #0
 8000232:	601a      	str	r2, [r3, #0]
		temp++;
 8000234:	4b23      	ldr	r3, [pc, #140]	; (80002c4 <subKeyProcess+0x178>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	3301      	adds	r3, #1
 800023a:	4a22      	ldr	r2, [pc, #136]	; (80002c4 <subKeyProcess+0x178>)
 800023c:	6013      	str	r3, [r2, #0]
		if (temp > 99) temp = 1;
 800023e:	4b21      	ldr	r3, [pc, #132]	; (80002c4 <subKeyProcess+0x178>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	2b63      	cmp	r3, #99	; 0x63
 8000244:	dd2d      	ble.n	80002a2 <subKeyProcess+0x156>
 8000246:	4b1f      	ldr	r3, [pc, #124]	; (80002c4 <subKeyProcess+0x178>)
 8000248:	2201      	movs	r2, #1
 800024a:	601a      	str	r2, [r3, #0]
		break;
 800024c:	e029      	b.n	80002a2 <subKeyProcess+0x156>
		if (button3_pressed_flag == 1) button3_pressed_flag = 0;
 800024e:	4b21      	ldr	r3, [pc, #132]	; (80002d4 <subKeyProcess+0x188>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	2b01      	cmp	r3, #1
 8000254:	d102      	bne.n	800025c <subKeyProcess+0x110>
 8000256:	4b1f      	ldr	r3, [pc, #124]	; (80002d4 <subKeyProcess+0x188>)
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
		switch (mode) {
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <subKeyProcess+0x168>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b03      	cmp	r3, #3
 8000262:	d820      	bhi.n	80002a6 <subKeyProcess+0x15a>
 8000264:	a201      	add	r2, pc, #4	; (adr r2, 800026c <subKeyProcess+0x120>)
 8000266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800026a:	bf00      	nop
 800026c:	0800029b 	.word	0x0800029b
 8000270:	0800027d 	.word	0x0800027d
 8000274:	08000287 	.word	0x08000287
 8000278:	08000291 	.word	0x08000291
			red_time = temp;
 800027c:	4b11      	ldr	r3, [pc, #68]	; (80002c4 <subKeyProcess+0x178>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0f      	ldr	r2, [pc, #60]	; (80002c0 <subKeyProcess+0x174>)
 8000282:	6013      	str	r3, [r2, #0]
			break;
 8000284:	e00a      	b.n	800029c <subKeyProcess+0x150>
			yellow_time = temp;
 8000286:	4b0f      	ldr	r3, [pc, #60]	; (80002c4 <subKeyProcess+0x178>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a0f      	ldr	r2, [pc, #60]	; (80002c8 <subKeyProcess+0x17c>)
 800028c:	6013      	str	r3, [r2, #0]
			break;
 800028e:	e005      	b.n	800029c <subKeyProcess+0x150>
			green_time = temp;
 8000290:	4b0c      	ldr	r3, [pc, #48]	; (80002c4 <subKeyProcess+0x178>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a0d      	ldr	r2, [pc, #52]	; (80002cc <subKeyProcess+0x180>)
 8000296:	6013      	str	r3, [r2, #0]
			break;
 8000298:	e000      	b.n	800029c <subKeyProcess+0x150>
			break;
 800029a:	bf00      	nop
		break;
 800029c:	e003      	b.n	80002a6 <subKeyProcess+0x15a>
		break;
 800029e:	bf00      	nop
 80002a0:	e002      	b.n	80002a8 <subKeyProcess+0x15c>
		break;
 80002a2:	bf00      	nop
 80002a4:	e000      	b.n	80002a8 <subKeyProcess+0x15c>
		break;
 80002a6:	bf00      	nop
}
 80002a8:	bf00      	nop
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000064 	.word	0x20000064
 80002b4:	2000007c 	.word	0x2000007c
 80002b8:	40010800 	.word	0x40010800
 80002bc:	20000034 	.word	0x20000034
 80002c0:	20000080 	.word	0x20000080
 80002c4:	2000008c 	.word	0x2000008c
 80002c8:	20000084 	.word	0x20000084
 80002cc:	20000088 	.word	0x20000088
 80002d0:	20000068 	.word	0x20000068
 80002d4:	2000006c 	.word	0x2000006c

080002d8 <holdKeyProcess>:

//This func do work when hold
void holdKeyProcess(int i) {
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
	if (button1_pressed_flag == 1) {
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <holdKeyProcess+0x20>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	d102      	bne.n	80002ee <holdKeyProcess+0x16>
		button1_pressed_flag = 0;
 80002e8:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <holdKeyProcess+0x20>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
	}
	//TODO
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	20000064 	.word	0x20000064

080002fc <getKeyInput>:

void getKeyInput(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	for (int i = 0; i < 3; i++) {
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	e089      	b.n	800041c <getKeyInput+0x120>
		KeyReg0[i] = KeyReg1[i];
 8000308:	4a49      	ldr	r2, [pc, #292]	; (8000430 <getKeyInput+0x134>)
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000310:	4948      	ldr	r1, [pc, #288]	; (8000434 <getKeyInput+0x138>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		KeyReg1[i] = KeyReg2[i];
 8000318:	4a47      	ldr	r2, [pc, #284]	; (8000438 <getKeyInput+0x13c>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000320:	4943      	ldr	r1, [pc, #268]	; (8000430 <getKeyInput+0x134>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if (i == 0) {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d10b      	bne.n	8000346 <getKeyInput+0x4a>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 800032e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000332:	4842      	ldr	r0, [pc, #264]	; (800043c <getKeyInput+0x140>)
 8000334:	f001 fa8e 	bl	8001854 <HAL_GPIO_ReadPin>
 8000338:	4603      	mov	r3, r0
 800033a:	4619      	mov	r1, r3
 800033c:	4a3e      	ldr	r2, [pc, #248]	; (8000438 <getKeyInput+0x13c>)
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000344:	e019      	b.n	800037a <getKeyInput+0x7e>
		}
		else if (i == 1) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	2b01      	cmp	r3, #1
 800034a:	d10b      	bne.n	8000364 <getKeyInput+0x68>
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 800034c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000350:	483a      	ldr	r0, [pc, #232]	; (800043c <getKeyInput+0x140>)
 8000352:	f001 fa7f 	bl	8001854 <HAL_GPIO_ReadPin>
 8000356:	4603      	mov	r3, r0
 8000358:	4619      	mov	r1, r3
 800035a:	4a37      	ldr	r2, [pc, #220]	; (8000438 <getKeyInput+0x13c>)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000362:	e00a      	b.n	800037a <getKeyInput+0x7e>
		}
		else {
			KeyReg2[i] = HAL_GPIO_ReadPin(BUTTON_3_GPIO_Port, BUTTON_3_Pin);
 8000364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000368:	4834      	ldr	r0, [pc, #208]	; (800043c <getKeyInput+0x140>)
 800036a:	f001 fa73 	bl	8001854 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	4619      	mov	r1, r3
 8000372:	4a31      	ldr	r2, [pc, #196]	; (8000438 <getKeyInput+0x13c>)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}

		if ((KeyReg0[i] == KeyReg1[i]) && (KeyReg1[i] == KeyReg2[i])) {
 800037a:	4a2e      	ldr	r2, [pc, #184]	; (8000434 <getKeyInput+0x138>)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000382:	492b      	ldr	r1, [pc, #172]	; (8000430 <getKeyInput+0x134>)
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800038a:	429a      	cmp	r2, r3
 800038c:	d143      	bne.n	8000416 <getKeyInput+0x11a>
 800038e:	4a28      	ldr	r2, [pc, #160]	; (8000430 <getKeyInput+0x134>)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000396:	4928      	ldr	r1, [pc, #160]	; (8000438 <getKeyInput+0x13c>)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d139      	bne.n	8000416 <getKeyInput+0x11a>
			if (KeyReg3[i] != KeyReg2[i]) {
 80003a2:	4a27      	ldr	r2, [pc, #156]	; (8000440 <getKeyInput+0x144>)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003aa:	4923      	ldr	r1, [pc, #140]	; (8000438 <getKeyInput+0x13c>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d018      	beq.n	80003e8 <getKeyInput+0xec>
				KeyReg3[i] = KeyReg2[i];
 80003b6:	4a20      	ldr	r2, [pc, #128]	; (8000438 <getKeyInput+0x13c>)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003be:	4920      	ldr	r1, [pc, #128]	; (8000440 <getKeyInput+0x144>)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (KeyReg2[i] == PRESSED_STATE) {
 80003c6:	4a1c      	ldr	r2, [pc, #112]	; (8000438 <getKeyInput+0x13c>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d105      	bne.n	80003de <getKeyInput+0xe2>
				  //TODO
				  subKeyProcess(i);
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f7ff feba 	bl	800014c <subKeyProcess>
				  stop_hold = i;
 80003d8:	4a1a      	ldr	r2, [pc, #104]	; (8000444 <getKeyInput+0x148>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	6013      	str	r3, [r2, #0]
				  //TimerForKeyPress = 300;
				}

				//Delay
				TimerForKeyPress = 300;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <getKeyInput+0x14c>)
 80003e0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	e016      	b.n	8000416 <getKeyInput+0x11a>
			}
			else {
				TimerForKeyPress--;
 80003e8:	4b17      	ldr	r3, [pc, #92]	; (8000448 <getKeyInput+0x14c>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	3b01      	subs	r3, #1
 80003ee:	4a16      	ldr	r2, [pc, #88]	; (8000448 <getKeyInput+0x14c>)
 80003f0:	6013      	str	r3, [r2, #0]
				if (TimerForKeyPress == 0) {
 80003f2:	4b15      	ldr	r3, [pc, #84]	; (8000448 <getKeyInput+0x14c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d10d      	bne.n	8000416 <getKeyInput+0x11a>
					if (KeyReg2[i] == PRESSED_STATE) {
 80003fa:	4a0f      	ldr	r2, [pc, #60]	; (8000438 <getKeyInput+0x13c>)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d104      	bne.n	8000410 <getKeyInput+0x114>
						  //TODO
						holdKeyProcess(stop_hold);
 8000406:	4b0f      	ldr	r3, [pc, #60]	; (8000444 <getKeyInput+0x148>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4618      	mov	r0, r3
 800040c:	f7ff ff64 	bl	80002d8 <holdKeyProcess>
					}
					//Second delay
					TimerForKeyPress = 100;
 8000410:	4b0d      	ldr	r3, [pc, #52]	; (8000448 <getKeyInput+0x14c>)
 8000412:	2264      	movs	r2, #100	; 0x64
 8000414:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 3; i++) {
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	3301      	adds	r3, #1
 800041a:	607b      	str	r3, [r7, #4]
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	2b02      	cmp	r3, #2
 8000420:	f77f af72 	ble.w	8000308 <getKeyInput+0xc>
				}
			}
		}
	}
}
 8000424:	bf00      	nop
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	2000000c 	.word	0x2000000c
 8000434:	20000000 	.word	0x20000000
 8000438:	20000018 	.word	0x20000018
 800043c:	40010800 	.word	0x40010800
 8000440:	20000024 	.word	0x20000024
 8000444:	20000070 	.word	0x20000070
 8000448:	20000030 	.word	0x20000030

0800044c <fsm_mode_run>:
 *      Author: ASUS
 */

#include "fsm_mode.h"

void fsm_mode_run() {
 800044c:	b580      	push	{r7, lr}
 800044e:	af00      	add	r7, sp, #0
	switch(mode) {
 8000450:	4b52      	ldr	r3, [pc, #328]	; (800059c <fsm_mode_run+0x150>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2b03      	cmp	r3, #3
 8000456:	f200 8092 	bhi.w	800057e <fsm_mode_run+0x132>
 800045a:	a201      	add	r2, pc, #4	; (adr r2, 8000460 <fsm_mode_run+0x14>)
 800045c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000460:	08000471 	.word	0x08000471
 8000464:	08000477 	.word	0x08000477
 8000468:	080004cf 	.word	0x080004cf
 800046c:	08000527 	.word	0x08000527
	case 0:
		fsm_traffic_run();
 8000470:	f000 f89c 	bl	80005ac <fsm_traffic_run>

		break;
 8000474:	e08f      	b.n	8000596 <fsm_mode_run+0x14a>
	case 1: //Tweak red
		display7SEG(temp);
 8000476:	4b4a      	ldr	r3, [pc, #296]	; (80005a0 <fsm_mode_run+0x154>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4618      	mov	r0, r3
 800047c:	f000 fba4 	bl	8000bc8 <display7SEG>
		HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, SET);
 8000480:	2201      	movs	r2, #1
 8000482:	2108      	movs	r1, #8
 8000484:	4847      	ldr	r0, [pc, #284]	; (80005a4 <fsm_mode_run+0x158>)
 8000486:	f001 f9fc 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, SET);
 800048a:	2201      	movs	r2, #1
 800048c:	2110      	movs	r1, #16
 800048e:	4845      	ldr	r0, [pc, #276]	; (80005a4 <fsm_mode_run+0x158>)
 8000490:	f001 f9f7 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 8000494:	2201      	movs	r2, #1
 8000496:	2140      	movs	r1, #64	; 0x40
 8000498:	4842      	ldr	r0, [pc, #264]	; (80005a4 <fsm_mode_run+0x158>)
 800049a:	f001 f9f2 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 800049e:	2201      	movs	r2, #1
 80004a0:	2180      	movs	r1, #128	; 0x80
 80004a2:	4840      	ldr	r0, [pc, #256]	; (80005a4 <fsm_mode_run+0x158>)
 80004a4:	f001 f9ed 	bl	8001882 <HAL_GPIO_WritePin>

		if (timer2_flag == 1) {
 80004a8:	4b3f      	ldr	r3, [pc, #252]	; (80005a8 <fsm_mode_run+0x15c>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d16d      	bne.n	800058c <fsm_mode_run+0x140>
			timer2_flag = 0;
 80004b0:	4b3d      	ldr	r3, [pc, #244]	; (80005a8 <fsm_mode_run+0x15c>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	601a      	str	r2, [r3, #0]
			//TODO
			HAL_GPIO_TogglePin(RED_0_GPIO_Port, RED_0_Pin);
 80004b6:	2104      	movs	r1, #4
 80004b8:	483a      	ldr	r0, [pc, #232]	; (80005a4 <fsm_mode_run+0x158>)
 80004ba:	f001 f9fa 	bl	80018b2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(RED_1_GPIO_Port, RED_1_Pin);
 80004be:	2120      	movs	r1, #32
 80004c0:	4838      	ldr	r0, [pc, #224]	; (80005a4 <fsm_mode_run+0x158>)
 80004c2:	f001 f9f6 	bl	80018b2 <HAL_GPIO_TogglePin>

			setTimer2(250);
 80004c6:	20fa      	movs	r0, #250	; 0xfa
 80004c8:	f000 fd82 	bl	8000fd0 <setTimer2>
		}

		break;
 80004cc:	e05e      	b.n	800058c <fsm_mode_run+0x140>

	case 2: //Tweak yellow
		display7SEG(temp);
 80004ce:	4b34      	ldr	r3, [pc, #208]	; (80005a0 <fsm_mode_run+0x154>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fb78 	bl	8000bc8 <display7SEG>
		HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	2104      	movs	r1, #4
 80004dc:	4831      	ldr	r0, [pc, #196]	; (80005a4 <fsm_mode_run+0x158>)
 80004de:	f001 f9d0 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, SET);
 80004e2:	2201      	movs	r2, #1
 80004e4:	2110      	movs	r1, #16
 80004e6:	482f      	ldr	r0, [pc, #188]	; (80005a4 <fsm_mode_run+0x158>)
 80004e8:	f001 f9cb 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	2120      	movs	r1, #32
 80004f0:	482c      	ldr	r0, [pc, #176]	; (80005a4 <fsm_mode_run+0x158>)
 80004f2:	f001 f9c6 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, SET);
 80004f6:	2201      	movs	r2, #1
 80004f8:	2180      	movs	r1, #128	; 0x80
 80004fa:	482a      	ldr	r0, [pc, #168]	; (80005a4 <fsm_mode_run+0x158>)
 80004fc:	f001 f9c1 	bl	8001882 <HAL_GPIO_WritePin>

		if (timer2_flag == 1) {
 8000500:	4b29      	ldr	r3, [pc, #164]	; (80005a8 <fsm_mode_run+0x15c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	2b01      	cmp	r3, #1
 8000506:	d143      	bne.n	8000590 <fsm_mode_run+0x144>
			timer2_flag = 0;
 8000508:	4b27      	ldr	r3, [pc, #156]	; (80005a8 <fsm_mode_run+0x15c>)
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
			//TODO
			HAL_GPIO_TogglePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin);
 800050e:	2108      	movs	r1, #8
 8000510:	4824      	ldr	r0, [pc, #144]	; (80005a4 <fsm_mode_run+0x158>)
 8000512:	f001 f9ce 	bl	80018b2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin);
 8000516:	2140      	movs	r1, #64	; 0x40
 8000518:	4822      	ldr	r0, [pc, #136]	; (80005a4 <fsm_mode_run+0x158>)
 800051a:	f001 f9ca 	bl	80018b2 <HAL_GPIO_TogglePin>

			setTimer2(250);
 800051e:	20fa      	movs	r0, #250	; 0xfa
 8000520:	f000 fd56 	bl	8000fd0 <setTimer2>
		}

		break;
 8000524:	e034      	b.n	8000590 <fsm_mode_run+0x144>

	case 3: //Tweak green
		display7SEG(temp);
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <fsm_mode_run+0x154>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fb4c 	bl	8000bc8 <display7SEG>
		HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2104      	movs	r1, #4
 8000534:	481b      	ldr	r0, [pc, #108]	; (80005a4 <fsm_mode_run+0x158>)
 8000536:	f001 f9a4 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, SET);
 800053a:	2201      	movs	r2, #1
 800053c:	2108      	movs	r1, #8
 800053e:	4819      	ldr	r0, [pc, #100]	; (80005a4 <fsm_mode_run+0x158>)
 8000540:	f001 f99f 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, SET);
 8000544:	2201      	movs	r2, #1
 8000546:	2120      	movs	r1, #32
 8000548:	4816      	ldr	r0, [pc, #88]	; (80005a4 <fsm_mode_run+0x158>)
 800054a:	f001 f99a 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, SET);
 800054e:	2201      	movs	r2, #1
 8000550:	2140      	movs	r1, #64	; 0x40
 8000552:	4814      	ldr	r0, [pc, #80]	; (80005a4 <fsm_mode_run+0x158>)
 8000554:	f001 f995 	bl	8001882 <HAL_GPIO_WritePin>

		if (timer2_flag == 1) {
 8000558:	4b13      	ldr	r3, [pc, #76]	; (80005a8 <fsm_mode_run+0x15c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d119      	bne.n	8000594 <fsm_mode_run+0x148>
			timer2_flag = 0;
 8000560:	4b11      	ldr	r3, [pc, #68]	; (80005a8 <fsm_mode_run+0x15c>)
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
			//TODO
			HAL_GPIO_TogglePin(GREEN_0_GPIO_Port, GREEN_0_Pin);
 8000566:	2110      	movs	r1, #16
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <fsm_mode_run+0x158>)
 800056a:	f001 f9a2 	bl	80018b2 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GREEN_1_GPIO_Port, GREEN_1_Pin);
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <fsm_mode_run+0x158>)
 8000572:	f001 f99e 	bl	80018b2 <HAL_GPIO_TogglePin>

			setTimer2(250);
 8000576:	20fa      	movs	r0, #250	; 0xfa
 8000578:	f000 fd2a 	bl	8000fd0 <setTimer2>
		}

		break;
 800057c:	e00a      	b.n	8000594 <fsm_mode_run+0x148>
	default:
		display7SEG(99);
 800057e:	2063      	movs	r0, #99	; 0x63
 8000580:	f000 fb22 	bl	8000bc8 <display7SEG>
		settraffic(99);
 8000584:	2063      	movs	r0, #99	; 0x63
 8000586:	f000 fac1 	bl	8000b0c <settraffic>

		break;
 800058a:	e004      	b.n	8000596 <fsm_mode_run+0x14a>
		break;
 800058c:	bf00      	nop
 800058e:	e002      	b.n	8000596 <fsm_mode_run+0x14a>
		break;
 8000590:	bf00      	nop
 8000592:	e000      	b.n	8000596 <fsm_mode_run+0x14a>
		break;
 8000594:	bf00      	nop
	}
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	2000007c 	.word	0x2000007c
 80005a0:	2000008c 	.word	0x2000008c
 80005a4:	40010800 	.word	0x40010800
 80005a8:	20000094 	.word	0x20000094

080005ac <fsm_traffic_run>:
#include "fsm_traffic.h"

int sec1 = 0;
int sec2 = 0;

void fsm_traffic_run() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	switch (state) {
 80005b0:	4b4a      	ldr	r3, [pc, #296]	; (80006dc <fsm_traffic_run+0x130>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d85b      	bhi.n	8000670 <fsm_traffic_run+0xc4>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <fsm_traffic_run+0x14>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005fb 	.word	0x080005fb
 80005c8:	08000621 	.word	0x08000621
 80005cc:	08000649 	.word	0x08000649
	case 0:
		if (sec1 == (red_time - green_time)  && sec2 == 0) {
 80005d0:	4b43      	ldr	r3, [pc, #268]	; (80006e0 <fsm_traffic_run+0x134>)
 80005d2:	681a      	ldr	r2, [r3, #0]
 80005d4:	4b43      	ldr	r3, [pc, #268]	; (80006e4 <fsm_traffic_run+0x138>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	1ad2      	subs	r2, r2, r3
 80005da:	4b43      	ldr	r3, [pc, #268]	; (80006e8 <fsm_traffic_run+0x13c>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	429a      	cmp	r2, r3
 80005e0:	d152      	bne.n	8000688 <fsm_traffic_run+0xdc>
 80005e2:	4b42      	ldr	r3, [pc, #264]	; (80006ec <fsm_traffic_run+0x140>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d14e      	bne.n	8000688 <fsm_traffic_run+0xdc>
			sec2 = yellow_time;
 80005ea:	4b41      	ldr	r3, [pc, #260]	; (80006f0 <fsm_traffic_run+0x144>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a3f      	ldr	r2, [pc, #252]	; (80006ec <fsm_traffic_run+0x140>)
 80005f0:	6013      	str	r3, [r2, #0]
			state = 1;
 80005f2:	4b3a      	ldr	r3, [pc, #232]	; (80006dc <fsm_traffic_run+0x130>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
		}
		break;
 80005f8:	e046      	b.n	8000688 <fsm_traffic_run+0xdc>
	case 1:
		if (sec1 == 0 && sec2 == 0) {
 80005fa:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <fsm_traffic_run+0x13c>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d10e      	bne.n	8000620 <fsm_traffic_run+0x74>
 8000602:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <fsm_traffic_run+0x140>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d10a      	bne.n	8000620 <fsm_traffic_run+0x74>
			sec1 = green_time;
 800060a:	4b36      	ldr	r3, [pc, #216]	; (80006e4 <fsm_traffic_run+0x138>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <fsm_traffic_run+0x13c>)
 8000610:	6013      	str	r3, [r2, #0]
			sec2 = red_time;
 8000612:	4b33      	ldr	r3, [pc, #204]	; (80006e0 <fsm_traffic_run+0x134>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a35      	ldr	r2, [pc, #212]	; (80006ec <fsm_traffic_run+0x140>)
 8000618:	6013      	str	r3, [r2, #0]
			state = 2;
 800061a:	4b30      	ldr	r3, [pc, #192]	; (80006dc <fsm_traffic_run+0x130>)
 800061c:	2202      	movs	r2, #2
 800061e:	601a      	str	r2, [r3, #0]
		}
	case 2:
		if (sec1 == 0 && sec2 == (red_time - green_time)) {
 8000620:	4b31      	ldr	r3, [pc, #196]	; (80006e8 <fsm_traffic_run+0x13c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d10f      	bne.n	8000648 <fsm_traffic_run+0x9c>
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <fsm_traffic_run+0x134>)
 800062a:	681a      	ldr	r2, [r3, #0]
 800062c:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <fsm_traffic_run+0x138>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	1ad2      	subs	r2, r2, r3
 8000632:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <fsm_traffic_run+0x140>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	429a      	cmp	r2, r3
 8000638:	d106      	bne.n	8000648 <fsm_traffic_run+0x9c>
			sec1 = yellow_time;
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <fsm_traffic_run+0x144>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <fsm_traffic_run+0x13c>)
 8000640:	6013      	str	r3, [r2, #0]
			state = 3;
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <fsm_traffic_run+0x130>)
 8000644:	2203      	movs	r2, #3
 8000646:	601a      	str	r2, [r3, #0]
		}
	case 3:
		if (sec1 == 0 && sec2 == 0) {
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <fsm_traffic_run+0x13c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d11d      	bne.n	800068c <fsm_traffic_run+0xe0>
 8000650:	4b26      	ldr	r3, [pc, #152]	; (80006ec <fsm_traffic_run+0x140>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d119      	bne.n	800068c <fsm_traffic_run+0xe0>
			sec1 = red_time;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <fsm_traffic_run+0x134>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a22      	ldr	r2, [pc, #136]	; (80006e8 <fsm_traffic_run+0x13c>)
 800065e:	6013      	str	r3, [r2, #0]
			sec2 = green_time;
 8000660:	4b20      	ldr	r3, [pc, #128]	; (80006e4 <fsm_traffic_run+0x138>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <fsm_traffic_run+0x140>)
 8000666:	6013      	str	r3, [r2, #0]
			state = 0;
 8000668:	4b1c      	ldr	r3, [pc, #112]	; (80006dc <fsm_traffic_run+0x130>)
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
		}
		break;
 800066e:	e00d      	b.n	800068c <fsm_traffic_run+0xe0>
	default:
		sec1 = red_time;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <fsm_traffic_run+0x134>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <fsm_traffic_run+0x13c>)
 8000676:	6013      	str	r3, [r2, #0]
		sec2 = green_time;
 8000678:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <fsm_traffic_run+0x138>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <fsm_traffic_run+0x140>)
 800067e:	6013      	str	r3, [r2, #0]
		state = 0;
 8000680:	4b16      	ldr	r3, [pc, #88]	; (80006dc <fsm_traffic_run+0x130>)
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
		break;
 8000686:	e002      	b.n	800068e <fsm_traffic_run+0xe2>
		break;
 8000688:	bf00      	nop
 800068a:	e000      	b.n	800068e <fsm_traffic_run+0xe2>
		break;
 800068c:	bf00      	nop
	}
	settraffic(state);
 800068e:	4b13      	ldr	r3, [pc, #76]	; (80006dc <fsm_traffic_run+0x130>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f000 fa3a 	bl	8000b0c <settraffic>
	display2Counter(sec1-1,sec2-1);
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <fsm_traffic_run+0x13c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	1e5a      	subs	r2, r3, #1
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <fsm_traffic_run+0x140>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	3b01      	subs	r3, #1
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f000 faca 	bl	8000c40 <display2Counter>
	if (timer3_flag == 1) {
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <fsm_traffic_run+0x148>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b01      	cmp	r3, #1
 80006b2:	d110      	bne.n	80006d6 <fsm_traffic_run+0x12a>
		timer3_flag = 0;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <fsm_traffic_run+0x148>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
		//TODO
		sec1--;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <fsm_traffic_run+0x13c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	3b01      	subs	r3, #1
 80006c0:	4a09      	ldr	r2, [pc, #36]	; (80006e8 <fsm_traffic_run+0x13c>)
 80006c2:	6013      	str	r3, [r2, #0]
		sec2--;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <fsm_traffic_run+0x140>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3b01      	subs	r3, #1
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <fsm_traffic_run+0x140>)
 80006cc:	6013      	str	r3, [r2, #0]

		setTimer3(1000);
 80006ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d2:	f000 fc97 	bl	8001004 <setTimer3>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000034 	.word	0x20000034
 80006e0:	20000080 	.word	0x20000080
 80006e4:	20000088 	.word	0x20000088
 80006e8:	20000074 	.word	0x20000074
 80006ec:	20000078 	.word	0x20000078
 80006f0:	20000084 	.word	0x20000084
 80006f4:	20000098 	.word	0x20000098

080006f8 <write7SEG>:
int led7SEG[7] = {0,0,0,0,0,0,0};
int ledtraffic0[3] = {0,0,0};
int ledtraffic1[3] = {0,0,0};

//Write the output of 7SEG & choose which 7SEG
void write7SEG(int led7SEG[7], int sw) {
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	switch (sw) {
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d003      	beq.n	8000710 <write7SEG+0x18>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d045      	beq.n	800079a <write7SEG+0xa2>
		HAL_GPIO_WritePin(LED7_SEG4_GPIO_Port, LED7_SEG4_Pin, led7SEG[4]);
		HAL_GPIO_WritePin(LED7_SEG5_GPIO_Port, LED7_SEG5_Pin, led7SEG[5]);
		HAL_GPIO_WritePin(LED7_SEG6_GPIO_Port, LED7_SEG6_Pin, led7SEG[6]);
		break;
	default:
		break;
 800070e:	e083      	b.n	8000818 <write7SEG+0x120>
		HAL_GPIO_WritePin(LED7_SEG0S_GPIO_Port, LED7_SEG0S_Pin, led7SEG[0]);
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	2180      	movs	r1, #128	; 0x80
 800071a:	4841      	ldr	r0, [pc, #260]	; (8000820 <write7SEG+0x128>)
 800071c:	f001 f8b1 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG1S_GPIO_Port, LED7_SEG1S_Pin, led7SEG[1]);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3304      	adds	r3, #4
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	b2db      	uxtb	r3, r3
 8000728:	461a      	mov	r2, r3
 800072a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800072e:	483c      	ldr	r0, [pc, #240]	; (8000820 <write7SEG+0x128>)
 8000730:	f001 f8a7 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG2S_GPIO_Port, LED7_SEG2S_Pin, led7SEG[2]);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	3308      	adds	r3, #8
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000742:	4837      	ldr	r0, [pc, #220]	; (8000820 <write7SEG+0x128>)
 8000744:	f001 f89d 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG3S_GPIO_Port, LED7_SEG3S_Pin, led7SEG[3]);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	330c      	adds	r3, #12
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	461a      	mov	r2, r3
 8000752:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000756:	4832      	ldr	r0, [pc, #200]	; (8000820 <write7SEG+0x128>)
 8000758:	f001 f893 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG4S_GPIO_Port, LED7_SEG4S_Pin, led7SEG[4]);
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	3310      	adds	r3, #16
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800076a:	482d      	ldr	r0, [pc, #180]	; (8000820 <write7SEG+0x128>)
 800076c:	f001 f889 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG5S_GPIO_Port, LED7_SEG5S_Pin, led7SEG[5]);
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	3314      	adds	r3, #20
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	461a      	mov	r2, r3
 800077a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800077e:	4828      	ldr	r0, [pc, #160]	; (8000820 <write7SEG+0x128>)
 8000780:	f001 f87f 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG6S_GPIO_Port, LED7_SEG6S_Pin, led7SEG[6]);
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3318      	adds	r3, #24
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	b2db      	uxtb	r3, r3
 800078c:	461a      	mov	r2, r3
 800078e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000792:	4823      	ldr	r0, [pc, #140]	; (8000820 <write7SEG+0x128>)
 8000794:	f001 f875 	bl	8001882 <HAL_GPIO_WritePin>
		break;
 8000798:	e03e      	b.n	8000818 <write7SEG+0x120>
		HAL_GPIO_WritePin(LED7_SEG0_GPIO_Port, LED7_SEG0_Pin, led7SEG[0]);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	461a      	mov	r2, r3
 80007a2:	2101      	movs	r1, #1
 80007a4:	481e      	ldr	r0, [pc, #120]	; (8000820 <write7SEG+0x128>)
 80007a6:	f001 f86c 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG1_GPIO_Port, LED7_SEG1_Pin, led7SEG[1]);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3304      	adds	r3, #4
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	461a      	mov	r2, r3
 80007b4:	2102      	movs	r1, #2
 80007b6:	481a      	ldr	r0, [pc, #104]	; (8000820 <write7SEG+0x128>)
 80007b8:	f001 f863 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG2_GPIO_Port, LED7_SEG2_Pin, led7SEG[2]);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	3308      	adds	r3, #8
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	2104      	movs	r1, #4
 80007c8:	4815      	ldr	r0, [pc, #84]	; (8000820 <write7SEG+0x128>)
 80007ca:	f001 f85a 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG3_GPIO_Port, LED7_SEG3_Pin, led7SEG[3]);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	330c      	adds	r3, #12
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	461a      	mov	r2, r3
 80007d8:	2108      	movs	r1, #8
 80007da:	4811      	ldr	r0, [pc, #68]	; (8000820 <write7SEG+0x128>)
 80007dc:	f001 f851 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG4_GPIO_Port, LED7_SEG4_Pin, led7SEG[4]);
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3310      	adds	r3, #16
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	461a      	mov	r2, r3
 80007ea:	2110      	movs	r1, #16
 80007ec:	480c      	ldr	r0, [pc, #48]	; (8000820 <write7SEG+0x128>)
 80007ee:	f001 f848 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG5_GPIO_Port, LED7_SEG5_Pin, led7SEG[5]);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3314      	adds	r3, #20
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	2120      	movs	r1, #32
 80007fe:	4808      	ldr	r0, [pc, #32]	; (8000820 <write7SEG+0x128>)
 8000800:	f001 f83f 	bl	8001882 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED7_SEG6_GPIO_Port, LED7_SEG6_Pin, led7SEG[6]);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3318      	adds	r3, #24
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	b2db      	uxtb	r3, r3
 800080c:	461a      	mov	r2, r3
 800080e:	2140      	movs	r1, #64	; 0x40
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <write7SEG+0x128>)
 8000812:	f001 f836 	bl	8001882 <HAL_GPIO_WritePin>
		break;
 8000816:	bf00      	nop
	}
}
 8000818:	bf00      	nop
 800081a:	3708      	adds	r7, #8
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	40010c00 	.word	0x40010c00

08000824 <set7SEG>:

//Set the value to (which) 7SEG
void set7SEG(int number, int sw) {
 8000824:	b5b0      	push	{r4, r5, r7, lr}
 8000826:	b0d0      	sub	sp, #320	; 0x140
 8000828:	af00      	add	r7, sp, #0
 800082a:	1d3b      	adds	r3, r7, #4
 800082c:	6018      	str	r0, [r3, #0]
 800082e:	463b      	mov	r3, r7
 8000830:	6019      	str	r1, [r3, #0]
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b09      	cmp	r3, #9
 8000838:	f200 80f3 	bhi.w	8000a22 <set7SEG+0x1fe>
 800083c:	a201      	add	r2, pc, #4	; (adr r2, 8000844 <set7SEG+0x20>)
 800083e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000842:	bf00      	nop
 8000844:	0800086d 	.word	0x0800086d
 8000848:	080008a7 	.word	0x080008a7
 800084c:	080008cb 	.word	0x080008cb
 8000850:	080008ef 	.word	0x080008ef
 8000854:	08000913 	.word	0x08000913
 8000858:	08000937 	.word	0x08000937
 800085c:	0800095b 	.word	0x0800095b
 8000860:	08000993 	.word	0x08000993
 8000864:	080009b7 	.word	0x080009b7
 8000868:	080009db 	.word	0x080009db
	switch(number) {
	case 0: {
		int led7SEG[7] = {0,0,0,0,0,0,1};
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000872:	2300      	movs	r3, #0
 8000874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000878:	2300      	movs	r3, #0
 800087a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800087e:	2300      	movs	r3, #0
 8000880:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8000884:	2300      	movs	r3, #0
 8000886:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800088a:	2300      	movs	r3, #0
 800088c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8000890:	2301      	movs	r3, #1
 8000892:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
		write7SEG(led7SEG, sw);
 8000896:	463b      	mov	r3, r7
 8000898:	f507 7292 	add.w	r2, r7, #292	; 0x124
 800089c:	6819      	ldr	r1, [r3, #0]
 800089e:	4610      	mov	r0, r2
 80008a0:	f7ff ff2a 	bl	80006f8 <write7SEG>
		break;
 80008a4:	e0e1      	b.n	8000a6a <set7SEG+0x246>
	}
	case 1: {
		int led7SEG[7] = {1,0,0,1,1,1,1};
 80008a6:	4b73      	ldr	r3, [pc, #460]	; (8000a74 <set7SEG+0x250>)
 80008a8:	f507 7484 	add.w	r4, r7, #264	; 0x108
 80008ac:	461d      	mov	r5, r3
 80008ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		write7SEG(led7SEG, sw);
 80008ba:	463b      	mov	r3, r7
 80008bc:	f507 7284 	add.w	r2, r7, #264	; 0x108
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	4610      	mov	r0, r2
 80008c4:	f7ff ff18 	bl	80006f8 <write7SEG>
		break;
 80008c8:	e0cf      	b.n	8000a6a <set7SEG+0x246>
	}
	case 2: {
		int led7SEG[7] = {0,0,1,0,0,1,0};
 80008ca:	4b6b      	ldr	r3, [pc, #428]	; (8000a78 <set7SEG+0x254>)
 80008cc:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 80008d0:	461d      	mov	r5, r3
 80008d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		write7SEG(led7SEG, sw);
 80008de:	463b      	mov	r3, r7
 80008e0:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80008e4:	6819      	ldr	r1, [r3, #0]
 80008e6:	4610      	mov	r0, r2
 80008e8:	f7ff ff06 	bl	80006f8 <write7SEG>
		break;
 80008ec:	e0bd      	b.n	8000a6a <set7SEG+0x246>
	}
	case 3: {
		int led7SEG[7] = {0,0,0,0,1,1,0};
 80008ee:	4b63      	ldr	r3, [pc, #396]	; (8000a7c <set7SEG+0x258>)
 80008f0:	f107 04d0 	add.w	r4, r7, #208	; 0xd0
 80008f4:	461d      	mov	r5, r3
 80008f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		write7SEG(led7SEG, sw);
 8000902:	463b      	mov	r3, r7
 8000904:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8000908:	6819      	ldr	r1, [r3, #0]
 800090a:	4610      	mov	r0, r2
 800090c:	f7ff fef4 	bl	80006f8 <write7SEG>
		break;
 8000910:	e0ab      	b.n	8000a6a <set7SEG+0x246>
	}
	case 4: {
		int led7SEG[7] = {1,0,0,1,1,0,0};
 8000912:	4b5b      	ldr	r3, [pc, #364]	; (8000a80 <set7SEG+0x25c>)
 8000914:	f107 04b4 	add.w	r4, r7, #180	; 0xb4
 8000918:	461d      	mov	r5, r3
 800091a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800091c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800091e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000922:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		write7SEG(led7SEG, sw);
 8000926:	463b      	mov	r3, r7
 8000928:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800092c:	6819      	ldr	r1, [r3, #0]
 800092e:	4610      	mov	r0, r2
 8000930:	f7ff fee2 	bl	80006f8 <write7SEG>
		break;
 8000934:	e099      	b.n	8000a6a <set7SEG+0x246>
	}
	case 5: {
		int led7SEG[7] = {0,1,0,0,1,0,0};
 8000936:	4b53      	ldr	r3, [pc, #332]	; (8000a84 <set7SEG+0x260>)
 8000938:	f107 0498 	add.w	r4, r7, #152	; 0x98
 800093c:	461d      	mov	r5, r3
 800093e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000940:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000942:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000946:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		write7SEG(led7SEG, sw);
 800094a:	463b      	mov	r3, r7
 800094c:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	4610      	mov	r0, r2
 8000954:	f7ff fed0 	bl	80006f8 <write7SEG>
		break;
 8000958:	e087      	b.n	8000a6a <set7SEG+0x246>
	}
	case 6: {
		int led7SEG[7] = {0,1,0,0,0,0,0};
 800095a:	2300      	movs	r3, #0
 800095c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800095e:	2301      	movs	r3, #1
 8000960:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000964:	2300      	movs	r3, #0
 8000966:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800096a:	2300      	movs	r3, #0
 800096c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000970:	2300      	movs	r3, #0
 8000972:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000976:	2300      	movs	r3, #0
 8000978:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800097c:	2300      	movs	r3, #0
 800097e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		write7SEG(led7SEG, sw);
 8000982:	463b      	mov	r3, r7
 8000984:	f107 027c 	add.w	r2, r7, #124	; 0x7c
 8000988:	6819      	ldr	r1, [r3, #0]
 800098a:	4610      	mov	r0, r2
 800098c:	f7ff feb4 	bl	80006f8 <write7SEG>
		break;
 8000990:	e06b      	b.n	8000a6a <set7SEG+0x246>
	}
	case 7: {
		int led7SEG[7] = {0,0,0,1,1,1,1};
 8000992:	4b3d      	ldr	r3, [pc, #244]	; (8000a88 <set7SEG+0x264>)
 8000994:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8000998:	461d      	mov	r5, r3
 800099a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800099c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		write7SEG(led7SEG, sw);
 80009a6:	463b      	mov	r3, r7
 80009a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80009ac:	6819      	ldr	r1, [r3, #0]
 80009ae:	4610      	mov	r0, r2
 80009b0:	f7ff fea2 	bl	80006f8 <write7SEG>
		break;
 80009b4:	e059      	b.n	8000a6a <set7SEG+0x246>
	}
	case 8: {
		int led7SEG[7] = {0,0,0,0,0,0,0};
 80009b6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
 80009c6:	615a      	str	r2, [r3, #20]
 80009c8:	619a      	str	r2, [r3, #24]
		write7SEG(led7SEG, sw);
 80009ca:	463b      	mov	r3, r7
 80009cc:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	4610      	mov	r0, r2
 80009d4:	f7ff fe90 	bl	80006f8 <write7SEG>
		break;
 80009d8:	e047      	b.n	8000a6a <set7SEG+0x246>
	}
	case 9: {
		int led7SEG[7] = {0,0,0,0,1,0,0};
 80009da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009e6:	2200      	movs	r2, #0
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009f6:	2200      	movs	r2, #0
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fe:	2201      	movs	r2, #1
 8000a00:	611a      	str	r2, [r3, #16]
 8000a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a06:	2200      	movs	r2, #0
 8000a08:	615a      	str	r2, [r3, #20]
 8000a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]
		write7SEG(led7SEG, sw);
 8000a12:	463b      	mov	r3, r7
 8000a14:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000a18:	6819      	ldr	r1, [r3, #0]
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	f7ff fe6c 	bl	80006f8 <write7SEG>
		break;
 8000a20:	e023      	b.n	8000a6a <set7SEG+0x246>
	}
	default: {
		int led7SEG[7] = {0,0,0,0,0,0,1};
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	f107 030c 	add.w	r3, r7, #12
 8000a46:	2200      	movs	r2, #0
 8000a48:	611a      	str	r2, [r3, #16]
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2201      	movs	r2, #1
 8000a58:	619a      	str	r2, [r3, #24]
		write7SEG(led7SEG, sw);
 8000a5a:	463b      	mov	r3, r7
 8000a5c:	f107 020c 	add.w	r2, r7, #12
 8000a60:	6819      	ldr	r1, [r3, #0]
 8000a62:	4610      	mov	r0, r2
 8000a64:	f7ff fe48 	bl	80006f8 <write7SEG>
		break;
 8000a68:	bf00      	nop
	}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bdb0      	pop	{r4, r5, r7, pc}
 8000a74:	080028ec 	.word	0x080028ec
 8000a78:	08002908 	.word	0x08002908
 8000a7c:	08002924 	.word	0x08002924
 8000a80:	08002940 	.word	0x08002940
 8000a84:	0800295c 	.word	0x0800295c
 8000a88:	08002978 	.word	0x08002978

08000a8c <writetraffic>:

//Write the output of traffic lights
void writetraffic(int ledtraffic0[3], int ledtraffic1[3]) {
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(RED_0_GPIO_Port, RED_0_Pin, ledtraffic0[0]);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	2104      	movs	r1, #4
 8000aa0:	4819      	ldr	r0, [pc, #100]	; (8000b08 <writetraffic+0x7c>)
 8000aa2:	f000 feee 	bl	8001882 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_0_GPIO_Port, YELLOW_0_Pin, ledtraffic0[1]);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	3304      	adds	r3, #4
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	461a      	mov	r2, r3
 8000ab0:	2108      	movs	r1, #8
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <writetraffic+0x7c>)
 8000ab4:	f000 fee5 	bl	8001882 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_0_GPIO_Port, GREEN_0_Pin, ledtraffic0[2]);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	3308      	adds	r3, #8
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	4810      	ldr	r0, [pc, #64]	; (8000b08 <writetraffic+0x7c>)
 8000ac6:	f000 fedc 	bl	8001882 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RED_1_GPIO_Port, RED_1_Pin, ledtraffic1[0]);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	2120      	movs	r1, #32
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <writetraffic+0x7c>)
 8000ad6:	f000 fed4 	bl	8001882 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(YELLOW_1_GPIO_Port, YELLOW_1_Pin, ledtraffic1[1]);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	3304      	adds	r3, #4
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2140      	movs	r1, #64	; 0x40
 8000ae6:	4808      	ldr	r0, [pc, #32]	; (8000b08 <writetraffic+0x7c>)
 8000ae8:	f000 fecb 	bl	8001882 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_1_GPIO_Port, GREEN_1_Pin, ledtraffic1[2]);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	3308      	adds	r3, #8
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	461a      	mov	r2, r3
 8000af6:	2180      	movs	r1, #128	; 0x80
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <writetraffic+0x7c>)
 8000afa:	f000 fec2 	bl	8001882 <HAL_GPIO_WritePin>
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40010800 	.word	0x40010800

08000b0c <settraffic>:

//Set the value to the traffic
void settraffic(int number) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
	int ledtraffic0[3] = {1,1,1};
 8000b14:	4a2b      	ldr	r2, [pc, #172]	; (8000bc4 <settraffic+0xb8>)
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int ledtraffic1[3] = {1,1,1};
 8000b20:	4a28      	ldr	r2, [pc, #160]	; (8000bc4 <settraffic+0xb8>)
 8000b22:	f107 0308 	add.w	r3, r7, #8
 8000b26:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b28:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	d82e      	bhi.n	8000b90 <settraffic+0x84>
 8000b32:	a201      	add	r2, pc, #4	; (adr r2, 8000b38 <settraffic+0x2c>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000b49 	.word	0x08000b49
 8000b3c:	08000b5b 	.word	0x08000b5b
 8000b40:	08000b6d 	.word	0x08000b6d
 8000b44:	08000b7f 	.word	0x08000b7f
	switch(number) {
	case 0: //R-G
		ledtraffic0[0] = 0; ledtraffic0[1] = 1; //R1-ON + Y1-OFF
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	61bb      	str	r3, [r7, #24]
		ledtraffic1[2] = 0; ledtraffic1[0] = 1; //G2-ON + R2-OFF
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]
 8000b54:	2301      	movs	r3, #1
 8000b56:	60bb      	str	r3, [r7, #8]
		break;
 8000b58:	e027      	b.n	8000baa <settraffic+0x9e>
	case 1: //R-Y
		ledtraffic0[0] = 0; ledtraffic0[1] = 1; //R1-ON + Y1-OFF
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	2301      	movs	r3, #1
 8000b60:	61bb      	str	r3, [r7, #24]
		ledtraffic1[1] = 0; ledtraffic1[2] = 1; //Y2-ON + G2-OFF
 8000b62:	2300      	movs	r3, #0
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	2301      	movs	r3, #1
 8000b68:	613b      	str	r3, [r7, #16]
		break;
 8000b6a:	e01e      	b.n	8000baa <settraffic+0x9e>
	case 2: //G-R
		ledtraffic0[2] = 0; ledtraffic0[0] = 1; //G1-ON + R1-OFF
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61fb      	str	r3, [r7, #28]
 8000b70:	2301      	movs	r3, #1
 8000b72:	617b      	str	r3, [r7, #20]
		ledtraffic1[0] = 0; ledtraffic1[1] = 1; //R2-ON + Y2-OFF
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
		break;
 8000b7c:	e015      	b.n	8000baa <settraffic+0x9e>
	case 3: //Y-R
		ledtraffic0[1] = 0; ledtraffic0[2] = 1; //Y1-ON + G1-OFF
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61bb      	str	r3, [r7, #24]
 8000b82:	2301      	movs	r3, #1
 8000b84:	61fb      	str	r3, [r7, #28]
		ledtraffic1[0] = 0; ledtraffic1[1] = 1; //R2-ON + Y2-OFF
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	60fb      	str	r3, [r7, #12]
		break;
 8000b8e:	e00c      	b.n	8000baa <settraffic+0x9e>
	default:
		ledtraffic0[0] = 1; ledtraffic0[0] = 1; //ALL OFF
 8000b90:	2301      	movs	r3, #1
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	2301      	movs	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
		ledtraffic0[1] = 1; ledtraffic0[1] = 1;
 8000b98:	2301      	movs	r3, #1
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	61bb      	str	r3, [r7, #24]
		ledtraffic0[2] = 1; ledtraffic0[2] = 1;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	61fb      	str	r3, [r7, #28]
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61fb      	str	r3, [r7, #28]
		break;
 8000ba8:	bf00      	nop
	}
	writetraffic(ledtraffic0, ledtraffic1);
 8000baa:	f107 0208 	add.w	r2, r7, #8
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4611      	mov	r1, r2
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff ff69 	bl	8000a8c <writetraffic>
}
 8000bba:	bf00      	nop
 8000bbc:	3720      	adds	r7, #32
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	08002994 	.word	0x08002994

08000bc8 <display7SEG>:


//Driver function for display7SEG
void display7SEG(int number) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	if (number >= 10) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b09      	cmp	r3, #9
 8000bd4:	dd1a      	ble.n	8000c0c <display7SEG+0x44>
		set7SEG(number/10, 0);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4a18      	ldr	r2, [pc, #96]	; (8000c3c <display7SEG+0x74>)
 8000bda:	fb82 1203 	smull	r1, r2, r2, r3
 8000bde:	1092      	asrs	r2, r2, #2
 8000be0:	17db      	asrs	r3, r3, #31
 8000be2:	1ad3      	subs	r3, r2, r3
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe1c 	bl	8000824 <set7SEG>
		set7SEG(number%10, 1);
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <display7SEG+0x74>)
 8000bf0:	fb83 1302 	smull	r1, r3, r3, r2
 8000bf4:	1099      	asrs	r1, r3, #2
 8000bf6:	17d3      	asrs	r3, r2, #31
 8000bf8:	1ac8      	subs	r0, r1, r3
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	009b      	lsls	r3, r3, #2
 8000bfe:	4403      	add	r3, r0
 8000c00:	005b      	lsls	r3, r3, #1
 8000c02:	1ad0      	subs	r0, r2, r3
 8000c04:	2101      	movs	r1, #1
 8000c06:	f7ff fe0d 	bl	8000824 <set7SEG>
	}
	else {
		set7SEG(0,0);
		set7SEG(number%10,1);
	}
}
 8000c0a:	e012      	b.n	8000c32 <display7SEG+0x6a>
		set7SEG(0,0);
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fe08 	bl	8000824 <set7SEG>
		set7SEG(number%10,1);
 8000c14:	687a      	ldr	r2, [r7, #4]
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <display7SEG+0x74>)
 8000c18:	fb83 1302 	smull	r1, r3, r3, r2
 8000c1c:	1099      	asrs	r1, r3, #2
 8000c1e:	17d3      	asrs	r3, r2, #31
 8000c20:	1ac8      	subs	r0, r1, r3
 8000c22:	4603      	mov	r3, r0
 8000c24:	009b      	lsls	r3, r3, #2
 8000c26:	4403      	add	r3, r0
 8000c28:	005b      	lsls	r3, r3, #1
 8000c2a:	1ad0      	subs	r0, r2, r3
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	f7ff fdf9 	bl	8000824 <set7SEG>
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	66666667 	.word	0x66666667

08000c40 <display2Counter>:

void display2Counter(int sec1, int sec2) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
	if (timer4_flag == 1) {
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <display2Counter+0x74>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d12c      	bne.n	8000cac <display2Counter+0x6c>
		timer4_flag = 0;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <display2Counter+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(EN0_GPIO_Port, EN0_Pin) == 0) {
 8000c58:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c5c:	4816      	ldr	r0, [pc, #88]	; (8000cb8 <display2Counter+0x78>)
 8000c5e:	f000 fdf9 	bl	8001854 <HAL_GPIO_ReadPin>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d10f      	bne.n	8000c88 <display2Counter+0x48>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <display2Counter+0x78>)
 8000c70:	f000 fe07 	bl	8001882 <HAL_GPIO_WritePin>
			display7SEG(sec2);
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f7ff ffa7 	bl	8000bc8 <display7SEG>
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <display2Counter+0x78>)
 8000c82:	f000 fdfe 	bl	8001882 <HAL_GPIO_WritePin>
 8000c86:	e00e      	b.n	8000ca6 <display2Counter+0x66>
		}
		else {
			HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000c88:	2201      	movs	r2, #1
 8000c8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c8e:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <display2Counter+0x78>)
 8000c90:	f000 fdf7 	bl	8001882 <HAL_GPIO_WritePin>
			display7SEG(sec1);
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f7ff ff97 	bl	8000bc8 <display7SEG>
			HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ca0:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <display2Counter+0x78>)
 8000ca2:	f000 fdee 	bl	8001882 <HAL_GPIO_WritePin>
		}
		setTimer4(125);
 8000ca6:	207d      	movs	r0, #125	; 0x7d
 8000ca8:	f000 f9c6 	bl	8001038 <setTimer4>
	}
}
 8000cac:	bf00      	nop
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	2000009c 	.word	0x2000009c
 8000cb8:	40010800 	.word	0x40010800

08000cbc <SecLED>:

void SecLED() {
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(LED_RED_GPIO_Port, LED_RED_Pin) == 0) {
 8000cc0:	2102      	movs	r1, #2
 8000cc2:	4809      	ldr	r0, [pc, #36]	; (8000ce8 <SecLED+0x2c>)
 8000cc4:	f000 fdc6 	bl	8001854 <HAL_GPIO_ReadPin>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d105      	bne.n	8000cda <SecLED+0x1e>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2102      	movs	r1, #2
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <SecLED+0x2c>)
 8000cd4:	f000 fdd5 	bl	8001882 <HAL_GPIO_WritePin>
	}
	else {
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
	}
}
 8000cd8:	e004      	b.n	8000ce4 <SecLED+0x28>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2102      	movs	r1, #2
 8000cde:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <SecLED+0x2c>)
 8000ce0:	f000 fdcf 	bl	8001882 <HAL_GPIO_WritePin>
}
 8000ce4:	bf00      	nop
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40010800 	.word	0x40010800

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf0:	f000 fac6 	bl	8001280 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf4:	f000 f850 	bl	8000d98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cf8:	f000 f8da 	bl	8000eb0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000cfc:	f000 f888 	bl	8000e10 <MX_TIM2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //INIT
  setTimer1(1000);
 8000d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d04:	f000 f94a 	bl	8000f9c <setTimer1>
  setTimer2(1000);
 8000d08:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d0c:	f000 f960 	bl	8000fd0 <setTimer2>
  setTimer3(2000);
 8000d10:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d14:	f000 f976 	bl	8001004 <setTimer3>
  setTimer4(1000);
 8000d18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1c:	f000 f98c 	bl	8001038 <setTimer4>
  mode = 0; //Mode [0-3]
 8000d20:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <main+0x94>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
  red_time = 7; //RED: default = 5 = yellow + green
 8000d26:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <main+0x98>)
 8000d28:	2207      	movs	r2, #7
 8000d2a:	601a      	str	r2, [r3, #0]
  yellow_time = 3; //YELLOW: default = 2
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <main+0x9c>)
 8000d2e:	2203      	movs	r2, #3
 8000d30:	601a      	str	r2, [r3, #0]
  green_time = 4; //GREEN: default = 3
 8000d32:	4b16      	ldr	r3, [pc, #88]	; (8000d8c <main+0xa0>)
 8000d34:	2204      	movs	r2, #4
 8000d36:	601a      	str	r2, [r3, #0]

  //INIT Display
  HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET); //SEG0
 8000d38:	2200      	movs	r2, #0
 8000d3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d3e:	4814      	ldr	r0, [pc, #80]	; (8000d90 <main+0xa4>)
 8000d40:	f000 fd9f 	bl	8001882 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);	//SEG1
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d4a:	4811      	ldr	r0, [pc, #68]	; (8000d90 <main+0xa4>)
 8000d4c:	f000 fd99 	bl	8001882 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	2102      	movs	r1, #2
 8000d54:	480e      	ldr	r0, [pc, #56]	; (8000d90 <main+0xa4>)
 8000d56:	f000 fd94 	bl	8001882 <HAL_GPIO_WritePin>
  display7SEG(0); //Set 7SEG to 0
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f7ff ff34 	bl	8000bc8 <display7SEG>


  while (1)
  {
	  fsm_mode_run();
 8000d60:	f7ff fb74 	bl	800044c <fsm_mode_run>

		if (timer1_flag == 1) {
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <main+0xa8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d1f9      	bne.n	8000d60 <main+0x74>
			timer1_flag = 0;
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <main+0xa8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
			//TODO
			SecLED();
 8000d72:	f7ff ffa3 	bl	8000cbc <SecLED>

			setTimer1(500);
 8000d76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d7a:	f000 f90f 	bl	8000f9c <setTimer1>
	  fsm_mode_run();
 8000d7e:	e7ef      	b.n	8000d60 <main+0x74>
 8000d80:	2000007c 	.word	0x2000007c
 8000d84:	20000080 	.word	0x20000080
 8000d88:	20000084 	.word	0x20000084
 8000d8c:	20000088 	.word	0x20000088
 8000d90:	40010800 	.word	0x40010800
 8000d94:	20000090 	.word	0x20000090

08000d98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b090      	sub	sp, #64	; 0x40
 8000d9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d9e:	f107 0318 	add.w	r3, r7, #24
 8000da2:	2228      	movs	r2, #40	; 0x28
 8000da4:	2100      	movs	r1, #0
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fd8c 	bl	80028c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dac:	1d3b      	adds	r3, r7, #4
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc2:	2310      	movs	r3, #16
 8000dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dca:	f107 0318 	add.w	r3, r7, #24
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 fd88 	bl	80018e4 <HAL_RCC_OscConfig>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000dda:	f000 f8d9 	bl	8000f90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dde:	230f      	movs	r3, #15
 8000de0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000de2:	2300      	movs	r3, #0
 8000de4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 fff4 	bl	8001de4 <HAL_RCC_ClockConfig>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e02:	f000 f8c5 	bl	8000f90 <Error_Handler>
  }
}
 8000e06:	bf00      	nop
 8000e08:	3740      	adds	r7, #64	; 0x40
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b086      	sub	sp, #24
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e24:	463b      	mov	r3, r7
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e2c:	4b1f      	ldr	r3, [pc, #124]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000e34:	4b1d      	ldr	r3, [pc, #116]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e36:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000e3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e44:	220a      	movs	r2, #10
 8000e46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e54:	4815      	ldr	r0, [pc, #84]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e56:	f001 f92d 	bl	80020b4 <HAL_TIM_Base_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e60:	f000 f896 	bl	8000f90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e6a:	f107 0308 	add.w	r3, r7, #8
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480e      	ldr	r0, [pc, #56]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e72:	f001 fac3 	bl	80023fc <HAL_TIM_ConfigClockSource>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e7c:	f000 f888 	bl	8000f90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e84:	2300      	movs	r3, #0
 8000e86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e8e:	f001 fc8b 	bl	80027a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e98:	f000 f87a 	bl	8000f90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000e9c:	4803      	ldr	r0, [pc, #12]	; (8000eac <MX_TIM2_Init+0x9c>)
 8000e9e:	f001 f959 	bl	8002154 <HAL_TIM_Base_Start_IT>
  /* USER CODE END TIM2_Init 2 */

}
 8000ea2:	bf00      	nop
 8000ea4:	3718      	adds	r7, #24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	200000a0 	.word	0x200000a0

08000eb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb6:	f107 0308 	add.w	r3, r7, #8
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]
 8000ec2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	4a28      	ldr	r2, [pc, #160]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6193      	str	r3, [r2, #24]
 8000ed0:	4b26      	ldr	r3, [pc, #152]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000ee2:	f043 0308 	orr.w	r3, r3, #8
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_GPIO_Init+0xbc>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0308 	and.w	r3, r3, #8
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED_Pin|RED_0_Pin|YELLOW_0_Pin|GREEN_0_Pin
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f240 31fe 	movw	r1, #1022	; 0x3fe
 8000efa:	481d      	ldr	r0, [pc, #116]	; (8000f70 <MX_GPIO_Init+0xc0>)
 8000efc:	f000 fcc1 	bl	8001882 <HAL_GPIO_WritePin>
                          |RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|EN0_Pin
                          |EN1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED7_SEG0_Pin|LED7_SEG1_Pin|LED7_SEG2_Pin|LED7_SEG3S_Pin
 8000f00:	2200      	movs	r2, #0
 8000f02:	f643 71ff 	movw	r1, #16383	; 0x3fff
 8000f06:	481b      	ldr	r0, [pc, #108]	; (8000f74 <MX_GPIO_Init+0xc4>)
 8000f08:	f000 fcbb 	bl	8001882 <HAL_GPIO_WritePin>
                          |LED7_SEG1S_Pin|LED7_SEG2S_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LED_RED_Pin RED_0_Pin YELLOW_0_Pin GREEN_0_Pin
                           RED_1_Pin YELLOW_1_Pin GREEN_1_Pin EN0_Pin
                           EN1_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|RED_0_Pin|YELLOW_0_Pin|GREEN_0_Pin
 8000f0c:	f240 33fe 	movw	r3, #1022	; 0x3fe
 8000f10:	60bb      	str	r3, [r7, #8]
                          |RED_1_Pin|YELLOW_1_Pin|GREEN_1_Pin|EN0_Pin
                          |EN1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4619      	mov	r1, r3
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <MX_GPIO_Init+0xc0>)
 8000f26:	f000 fb1b 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED7_SEG0_Pin LED7_SEG1_Pin LED7_SEG2_Pin LED7_SEG3S_Pin
                           LED7_SEG4S_Pin LED7_SEG5S_Pin LED7_SEG6S_Pin LED7_SEG3_Pin
                           LED7_SEG4_Pin LED7_SEG5_Pin LED7_SEG6_Pin LED7_SEG0S_Pin
                           LED7_SEG1S_Pin LED7_SEG2S_Pin */
  GPIO_InitStruct.Pin = LED7_SEG0_Pin|LED7_SEG1_Pin|LED7_SEG2_Pin|LED7_SEG3S_Pin
 8000f2a:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000f2e:	60bb      	str	r3, [r7, #8]
                          |LED7_SEG4S_Pin|LED7_SEG5S_Pin|LED7_SEG6S_Pin|LED7_SEG3_Pin
                          |LED7_SEG4_Pin|LED7_SEG5_Pin|LED7_SEG6_Pin|LED7_SEG0S_Pin
                          |LED7_SEG1S_Pin|LED7_SEG2S_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0308 	add.w	r3, r7, #8
 8000f40:	4619      	mov	r1, r3
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_GPIO_Init+0xc4>)
 8000f44:	f000 fb0c 	bl	8001560 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_1_Pin BUTTON_2_Pin BUTTON_3_Pin */
  GPIO_InitStruct.Pin = BUTTON_1_Pin|BUTTON_2_Pin|BUTTON_3_Pin;
 8000f48:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000f4c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f52:	2301      	movs	r3, #1
 8000f54:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0308 	add.w	r3, r7, #8
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_GPIO_Init+0xc0>)
 8000f5e:	f000 faff 	bl	8001560 <HAL_GPIO_Init>

}
 8000f62:	bf00      	nop
 8000f64:	3718      	adds	r7, #24
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40010800 	.word	0x40010800
 8000f74:	40010c00 	.word	0x40010c00

08000f78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef * htim) {
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f80:	f000 f874 	bl	800106c <timerRun>
	getKeyInput();
 8000f84:	f7ff f9ba 	bl	80002fc <getKeyInput>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f94:	b672      	cpsid	i
}
 8000f96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <Error_Handler+0x8>
	...

08000f9c <setTimer1>:
int timer3_flag = 0;

int timer4_counter;
int timer4_flag = 0;

void setTimer1(int duration) {
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/TIMER_CYCLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <setTimer1+0x28>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fae:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <setTimer1+0x2c>)
 8000fb0:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <setTimer1+0x30>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20000038 	.word	0x20000038
 8000fc8:	200000f4 	.word	0x200000f4
 8000fcc:	20000090 	.word	0x20000090

08000fd0 <setTimer2>:

void setTimer2(int duration) {
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/TIMER_CYCLE;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <setTimer2+0x28>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <setTimer2+0x2c>)
 8000fe4:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <setTimer2+0x30>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000038 	.word	0x20000038
 8000ffc:	200000e8 	.word	0x200000e8
 8001000:	20000094 	.word	0x20000094

08001004 <setTimer3>:

void setTimer3(int duration) {
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/TIMER_CYCLE;
 800100c:	4b07      	ldr	r3, [pc, #28]	; (800102c <setTimer3+0x28>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	fb92 f3f3 	sdiv	r3, r2, r3
 8001016:	4a06      	ldr	r2, [pc, #24]	; (8001030 <setTimer3+0x2c>)
 8001018:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <setTimer3+0x30>)
 800101c:	2200      	movs	r2, #0
 800101e:	601a      	str	r2, [r3, #0]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000038 	.word	0x20000038
 8001030:	200000f0 	.word	0x200000f0
 8001034:	20000098 	.word	0x20000098

08001038 <setTimer4>:

void setTimer4(int duration) {
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/TIMER_CYCLE;
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <setTimer4+0x28>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	fb92 f3f3 	sdiv	r3, r2, r3
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <setTimer4+0x2c>)
 800104c:	6013      	str	r3, [r2, #0]
	timer4_flag = 0;
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <setTimer4+0x30>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
}
 8001054:	bf00      	nop
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	20000038 	.word	0x20000038
 8001064:	200000ec 	.word	0x200000ec
 8001068:	2000009c 	.word	0x2000009c

0800106c <timerRun>:

void timerRun() {
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
	if (timer1_counter > 0) {
 8001070:	4b21      	ldr	r3, [pc, #132]	; (80010f8 <timerRun+0x8c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd0b      	ble.n	8001090 <timerRun+0x24>
		timer1_counter--;
 8001078:	4b1f      	ldr	r3, [pc, #124]	; (80010f8 <timerRun+0x8c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	3b01      	subs	r3, #1
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <timerRun+0x8c>)
 8001080:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0) {
 8001082:	4b1d      	ldr	r3, [pc, #116]	; (80010f8 <timerRun+0x8c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	dc02      	bgt.n	8001090 <timerRun+0x24>
			timer1_flag = 1;
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <timerRun+0x90>)
 800108c:	2201      	movs	r2, #1
 800108e:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer2_counter > 0) {
 8001090:	4b1b      	ldr	r3, [pc, #108]	; (8001100 <timerRun+0x94>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	dd0b      	ble.n	80010b0 <timerRun+0x44>
		timer2_counter--;
 8001098:	4b19      	ldr	r3, [pc, #100]	; (8001100 <timerRun+0x94>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3b01      	subs	r3, #1
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <timerRun+0x94>)
 80010a0:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0) {
 80010a2:	4b17      	ldr	r3, [pc, #92]	; (8001100 <timerRun+0x94>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	dc02      	bgt.n	80010b0 <timerRun+0x44>
			timer2_flag = 1;
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <timerRun+0x98>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer3_counter > 0) {
 80010b0:	4b15      	ldr	r3, [pc, #84]	; (8001108 <timerRun+0x9c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	dd0b      	ble.n	80010d0 <timerRun+0x64>
		timer3_counter--;
 80010b8:	4b13      	ldr	r3, [pc, #76]	; (8001108 <timerRun+0x9c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	3b01      	subs	r3, #1
 80010be:	4a12      	ldr	r2, [pc, #72]	; (8001108 <timerRun+0x9c>)
 80010c0:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0) {
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <timerRun+0x9c>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	dc02      	bgt.n	80010d0 <timerRun+0x64>
			timer3_flag = 1;
 80010ca:	4b10      	ldr	r3, [pc, #64]	; (800110c <timerRun+0xa0>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
		}
	}
	if (timer4_counter > 0) {
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <timerRun+0xa4>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	dd0b      	ble.n	80010f0 <timerRun+0x84>
		timer4_counter--;
 80010d8:	4b0d      	ldr	r3, [pc, #52]	; (8001110 <timerRun+0xa4>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	3b01      	subs	r3, #1
 80010de:	4a0c      	ldr	r2, [pc, #48]	; (8001110 <timerRun+0xa4>)
 80010e0:	6013      	str	r3, [r2, #0]
		if (timer4_counter <= 0) {
 80010e2:	4b0b      	ldr	r3, [pc, #44]	; (8001110 <timerRun+0xa4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	dc02      	bgt.n	80010f0 <timerRun+0x84>
			timer4_flag = 1;
 80010ea:	4b0a      	ldr	r3, [pc, #40]	; (8001114 <timerRun+0xa8>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	601a      	str	r2, [r3, #0]
		}
	}
}
 80010f0:	bf00      	nop
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	200000f4 	.word	0x200000f4
 80010fc:	20000090 	.word	0x20000090
 8001100:	200000e8 	.word	0x200000e8
 8001104:	20000094 	.word	0x20000094
 8001108:	200000f0 	.word	0x200000f0
 800110c:	20000098 	.word	0x20000098
 8001110:	200000ec 	.word	0x200000ec
 8001114:	2000009c 	.word	0x2000009c

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_MspInit+0x5c>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a14      	ldr	r2, [pc, #80]	; (8001174 <HAL_MspInit+0x5c>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b12      	ldr	r3, [pc, #72]	; (8001174 <HAL_MspInit+0x5c>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60bb      	str	r3, [r7, #8]
 8001134:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_MspInit+0x5c>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_MspInit+0x5c>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <HAL_MspInit+0x5c>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800114e:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_MspInit+0x60>)
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	4a04      	ldr	r2, [pc, #16]	; (8001178 <HAL_MspInit+0x60>)
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116a:	bf00      	nop
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40021000 	.word	0x40021000
 8001178:	40010000 	.word	0x40010000

0800117c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d113      	bne.n	80011b6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_TIM_Base_MspInit+0x44>)
 8001190:	69db      	ldr	r3, [r3, #28]
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <HAL_TIM_Base_MspInit+0x44>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	61d3      	str	r3, [r2, #28]
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_TIM_Base_MspInit+0x44>)
 800119c:	69db      	ldr	r3, [r3, #28]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	201c      	movs	r0, #28
 80011ac:	f000 f9a1 	bl	80014f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011b0:	201c      	movs	r0, #28
 80011b2:	f000 f9ba 	bl	800152a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <NMI_Handler+0x4>

080011ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler+0x4>

080011d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011da:	e7fe      	b.n	80011da <BusFault_Handler+0x4>

080011dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <UsageFault_Handler+0x4>

080011e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bc80      	pop	{r7}
 80011ec:	4770      	bx	lr

080011ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ee:	b480      	push	{r7}
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011f2:	bf00      	nop
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011fe:	bf00      	nop
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800120a:	f000 f87f 	bl	800130c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <TIM2_IRQHandler+0x10>)
 800121a:	f000 ffe7 	bl	80021ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200000a0 	.word	0x200000a0

08001228 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001234:	480c      	ldr	r0, [pc, #48]	; (8001268 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001236:	490d      	ldr	r1, [pc, #52]	; (800126c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001238:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800123a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800123c:	e002      	b.n	8001244 <LoopCopyDataInit>

0800123e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800123e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001242:	3304      	adds	r3, #4

08001244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001248:	d3f9      	bcc.n	800123e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800124a:	4a0a      	ldr	r2, [pc, #40]	; (8001274 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800124c:	4c0a      	ldr	r4, [pc, #40]	; (8001278 <LoopFillZerobss+0x22>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001250:	e001      	b.n	8001256 <LoopFillZerobss>

08001252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001254:	3204      	adds	r2, #4

08001256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001258:	d3fb      	bcc.n	8001252 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800125a:	f7ff ffe5 	bl	8001228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800125e:	f001 fb0d 	bl	800287c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001262:	f7ff fd43 	bl	8000cec <main>
  bx lr
 8001266:	4770      	bx	lr
  ldr r0, =_sdata
 8001268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800126c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001270:	080029c8 	.word	0x080029c8
  ldr r2, =_sbss
 8001274:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001278:	200000fc 	.word	0x200000fc

0800127c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800127c:	e7fe      	b.n	800127c <ADC1_2_IRQHandler>
	...

08001280 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_Init+0x28>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a07      	ldr	r2, [pc, #28]	; (80012a8 <HAL_Init+0x28>)
 800128a:	f043 0310 	orr.w	r3, r3, #16
 800128e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001290:	2003      	movs	r0, #3
 8001292:	f000 f923 	bl	80014dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001296:	200f      	movs	r0, #15
 8001298:	f000 f808 	bl	80012ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800129c:	f7ff ff3c 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40022000 	.word	0x40022000

080012ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_InitTick+0x54>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_InitTick+0x58>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4619      	mov	r1, r3
 80012be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f93b 	bl	8001546 <HAL_SYSTICK_Config>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e00e      	b.n	80012f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b0f      	cmp	r3, #15
 80012de:	d80a      	bhi.n	80012f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012e0:	2200      	movs	r2, #0
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	f04f 30ff 	mov.w	r0, #4294967295
 80012e8:	f000 f903 	bl	80014f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012ec:	4a06      	ldr	r2, [pc, #24]	; (8001308 <HAL_InitTick+0x5c>)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e000      	b.n	80012f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000003c 	.word	0x2000003c
 8001304:	20000044 	.word	0x20000044
 8001308:	20000040 	.word	0x20000040

0800130c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001310:	4b05      	ldr	r3, [pc, #20]	; (8001328 <HAL_IncTick+0x1c>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	461a      	mov	r2, r3
 8001316:	4b05      	ldr	r3, [pc, #20]	; (800132c <HAL_IncTick+0x20>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4413      	add	r3, r2
 800131c:	4a03      	ldr	r2, [pc, #12]	; (800132c <HAL_IncTick+0x20>)
 800131e:	6013      	str	r3, [r2, #0]
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr
 8001328:	20000044 	.word	0x20000044
 800132c:	200000f8 	.word	0x200000f8

08001330 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  return uwTick;
 8001334:	4b02      	ldr	r3, [pc, #8]	; (8001340 <HAL_GetTick+0x10>)
 8001336:	681b      	ldr	r3, [r3, #0]
}
 8001338:	4618      	mov	r0, r3
 800133a:	46bd      	mov	sp, r7
 800133c:	bc80      	pop	{r7}
 800133e:	4770      	bx	lr
 8001340:	200000f8 	.word	0x200000f8

08001344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800135a:	68ba      	ldr	r2, [r7, #8]
 800135c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001360:	4013      	ands	r3, r2
 8001362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800136c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001370:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001374:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001376:	4a04      	ldr	r2, [pc, #16]	; (8001388 <__NVIC_SetPriorityGrouping+0x44>)
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	60d3      	str	r3, [r2, #12]
}
 800137c:	bf00      	nop
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	0a1b      	lsrs	r3, r3, #8
 8001396:	f003 0307 	and.w	r3, r3, #7
}
 800139a:	4618      	mov	r0, r3
 800139c:	46bd      	mov	sp, r7
 800139e:	bc80      	pop	{r7}
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	db0b      	blt.n	80013d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	f003 021f 	and.w	r2, r3, #31
 80013c0:	4906      	ldr	r1, [pc, #24]	; (80013dc <__NVIC_EnableIRQ+0x34>)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	095b      	lsrs	r3, r3, #5
 80013c8:	2001      	movs	r0, #1
 80013ca:	fa00 f202 	lsl.w	r2, r0, r2
 80013ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	e000e100 	.word	0xe000e100

080013e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	6039      	str	r1, [r7, #0]
 80013ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	db0a      	blt.n	800140a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490c      	ldr	r1, [pc, #48]	; (800142c <__NVIC_SetPriority+0x4c>)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	0112      	lsls	r2, r2, #4
 8001400:	b2d2      	uxtb	r2, r2
 8001402:	440b      	add	r3, r1
 8001404:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001408:	e00a      	b.n	8001420 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	b2da      	uxtb	r2, r3
 800140e:	4908      	ldr	r1, [pc, #32]	; (8001430 <__NVIC_SetPriority+0x50>)
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	f003 030f 	and.w	r3, r3, #15
 8001416:	3b04      	subs	r3, #4
 8001418:	0112      	lsls	r2, r2, #4
 800141a:	b2d2      	uxtb	r2, r2
 800141c:	440b      	add	r3, r1
 800141e:	761a      	strb	r2, [r3, #24]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	bc80      	pop	{r7}
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000e100 	.word	0xe000e100
 8001430:	e000ed00 	.word	0xe000ed00

08001434 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001434:	b480      	push	{r7}
 8001436:	b089      	sub	sp, #36	; 0x24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	f1c3 0307 	rsb	r3, r3, #7
 800144e:	2b04      	cmp	r3, #4
 8001450:	bf28      	it	cs
 8001452:	2304      	movcs	r3, #4
 8001454:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3304      	adds	r3, #4
 800145a:	2b06      	cmp	r3, #6
 800145c:	d902      	bls.n	8001464 <NVIC_EncodePriority+0x30>
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3b03      	subs	r3, #3
 8001462:	e000      	b.n	8001466 <NVIC_EncodePriority+0x32>
 8001464:	2300      	movs	r3, #0
 8001466:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	69bb      	ldr	r3, [r7, #24]
 800146e:	fa02 f303 	lsl.w	r3, r2, r3
 8001472:	43da      	mvns	r2, r3
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	401a      	ands	r2, r3
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800147c:	f04f 31ff 	mov.w	r1, #4294967295
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	43d9      	mvns	r1, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	4313      	orrs	r3, r2
         );
}
 800148e:	4618      	mov	r0, r3
 8001490:	3724      	adds	r7, #36	; 0x24
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a8:	d301      	bcc.n	80014ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014aa:	2301      	movs	r3, #1
 80014ac:	e00f      	b.n	80014ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ae:	4a0a      	ldr	r2, [pc, #40]	; (80014d8 <SysTick_Config+0x40>)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b6:	210f      	movs	r1, #15
 80014b8:	f04f 30ff 	mov.w	r0, #4294967295
 80014bc:	f7ff ff90 	bl	80013e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c0:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <SysTick_Config+0x40>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <SysTick_Config+0x40>)
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014cc:	2300      	movs	r3, #0
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	e000e010 	.word	0xe000e010

080014dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f7ff ff2d 	bl	8001344 <__NVIC_SetPriorityGrouping>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b086      	sub	sp, #24
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001504:	f7ff ff42 	bl	800138c <__NVIC_GetPriorityGrouping>
 8001508:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	68b9      	ldr	r1, [r7, #8]
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff ff90 	bl	8001434 <NVIC_EncodePriority>
 8001514:	4602      	mov	r2, r0
 8001516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff ff5f 	bl	80013e0 <__NVIC_SetPriority>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b082      	sub	sp, #8
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff35 	bl	80013a8 <__NVIC_EnableIRQ>
}
 800153e:	bf00      	nop
 8001540:	3708      	adds	r7, #8
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffa2 	bl	8001498 <SysTick_Config>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
	...

08001560 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001560:	b480      	push	{r7}
 8001562:	b08b      	sub	sp, #44	; 0x2c
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800156a:	2300      	movs	r3, #0
 800156c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001572:	e148      	b.n	8001806 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001574:	2201      	movs	r2, #1
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 8137 	bne.w	8001800 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4aa3      	ldr	r2, [pc, #652]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d05e      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 800159c:	4aa1      	ldr	r2, [pc, #644]	; (8001824 <HAL_GPIO_Init+0x2c4>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d875      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015a2:	4aa1      	ldr	r2, [pc, #644]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d058      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015a8:	4a9f      	ldr	r2, [pc, #636]	; (8001828 <HAL_GPIO_Init+0x2c8>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d86f      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015ae:	4a9f      	ldr	r2, [pc, #636]	; (800182c <HAL_GPIO_Init+0x2cc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d052      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015b4:	4a9d      	ldr	r2, [pc, #628]	; (800182c <HAL_GPIO_Init+0x2cc>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d869      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015ba:	4a9d      	ldr	r2, [pc, #628]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d04c      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015c0:	4a9b      	ldr	r2, [pc, #620]	; (8001830 <HAL_GPIO_Init+0x2d0>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d863      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015c6:	4a9b      	ldr	r2, [pc, #620]	; (8001834 <HAL_GPIO_Init+0x2d4>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d046      	beq.n	800165a <HAL_GPIO_Init+0xfa>
 80015cc:	4a99      	ldr	r2, [pc, #612]	; (8001834 <HAL_GPIO_Init+0x2d4>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d85d      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015d2:	2b12      	cmp	r3, #18
 80015d4:	d82a      	bhi.n	800162c <HAL_GPIO_Init+0xcc>
 80015d6:	2b12      	cmp	r3, #18
 80015d8:	d859      	bhi.n	800168e <HAL_GPIO_Init+0x12e>
 80015da:	a201      	add	r2, pc, #4	; (adr r2, 80015e0 <HAL_GPIO_Init+0x80>)
 80015dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e0:	0800165b 	.word	0x0800165b
 80015e4:	08001635 	.word	0x08001635
 80015e8:	08001647 	.word	0x08001647
 80015ec:	08001689 	.word	0x08001689
 80015f0:	0800168f 	.word	0x0800168f
 80015f4:	0800168f 	.word	0x0800168f
 80015f8:	0800168f 	.word	0x0800168f
 80015fc:	0800168f 	.word	0x0800168f
 8001600:	0800168f 	.word	0x0800168f
 8001604:	0800168f 	.word	0x0800168f
 8001608:	0800168f 	.word	0x0800168f
 800160c:	0800168f 	.word	0x0800168f
 8001610:	0800168f 	.word	0x0800168f
 8001614:	0800168f 	.word	0x0800168f
 8001618:	0800168f 	.word	0x0800168f
 800161c:	0800168f 	.word	0x0800168f
 8001620:	0800168f 	.word	0x0800168f
 8001624:	0800163d 	.word	0x0800163d
 8001628:	08001651 	.word	0x08001651
 800162c:	4a82      	ldr	r2, [pc, #520]	; (8001838 <HAL_GPIO_Init+0x2d8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001632:	e02c      	b.n	800168e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	623b      	str	r3, [r7, #32]
          break;
 800163a:	e029      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	3304      	adds	r3, #4
 8001642:	623b      	str	r3, [r7, #32]
          break;
 8001644:	e024      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	3308      	adds	r3, #8
 800164c:	623b      	str	r3, [r7, #32]
          break;
 800164e:	e01f      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	330c      	adds	r3, #12
 8001656:	623b      	str	r3, [r7, #32]
          break;
 8001658:	e01a      	b.n	8001690 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d102      	bne.n	8001668 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001662:	2304      	movs	r3, #4
 8001664:	623b      	str	r3, [r7, #32]
          break;
 8001666:	e013      	b.n	8001690 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001670:	2308      	movs	r3, #8
 8001672:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69fa      	ldr	r2, [r7, #28]
 8001678:	611a      	str	r2, [r3, #16]
          break;
 800167a:	e009      	b.n	8001690 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800167c:	2308      	movs	r3, #8
 800167e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	615a      	str	r2, [r3, #20]
          break;
 8001686:	e003      	b.n	8001690 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001688:	2300      	movs	r3, #0
 800168a:	623b      	str	r3, [r7, #32]
          break;
 800168c:	e000      	b.n	8001690 <HAL_GPIO_Init+0x130>
          break;
 800168e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	2bff      	cmp	r3, #255	; 0xff
 8001694:	d801      	bhi.n	800169a <HAL_GPIO_Init+0x13a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	e001      	b.n	800169e <HAL_GPIO_Init+0x13e>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2bff      	cmp	r3, #255	; 0xff
 80016a4:	d802      	bhi.n	80016ac <HAL_GPIO_Init+0x14c>
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	e002      	b.n	80016b2 <HAL_GPIO_Init+0x152>
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	3b08      	subs	r3, #8
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	210f      	movs	r1, #15
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	401a      	ands	r2, r3
 80016c4:	6a39      	ldr	r1, [r7, #32]
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	431a      	orrs	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8090 	beq.w	8001800 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e0:	4b56      	ldr	r3, [pc, #344]	; (800183c <HAL_GPIO_Init+0x2dc>)
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	4a55      	ldr	r2, [pc, #340]	; (800183c <HAL_GPIO_Init+0x2dc>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b53      	ldr	r3, [pc, #332]	; (800183c <HAL_GPIO_Init+0x2dc>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016f8:	4a51      	ldr	r2, [pc, #324]	; (8001840 <HAL_GPIO_Init+0x2e0>)
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	089b      	lsrs	r3, r3, #2
 80016fe:	3302      	adds	r3, #2
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	43db      	mvns	r3, r3
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	4013      	ands	r3, r2
 800171a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a49      	ldr	r2, [pc, #292]	; (8001844 <HAL_GPIO_Init+0x2e4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d00d      	beq.n	8001740 <HAL_GPIO_Init+0x1e0>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a48      	ldr	r2, [pc, #288]	; (8001848 <HAL_GPIO_Init+0x2e8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d007      	beq.n	800173c <HAL_GPIO_Init+0x1dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a47      	ldr	r2, [pc, #284]	; (800184c <HAL_GPIO_Init+0x2ec>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d101      	bne.n	8001738 <HAL_GPIO_Init+0x1d8>
 8001734:	2302      	movs	r3, #2
 8001736:	e004      	b.n	8001742 <HAL_GPIO_Init+0x1e2>
 8001738:	2303      	movs	r3, #3
 800173a:	e002      	b.n	8001742 <HAL_GPIO_Init+0x1e2>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_GPIO_Init+0x1e2>
 8001740:	2300      	movs	r3, #0
 8001742:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001744:	f002 0203 	and.w	r2, r2, #3
 8001748:	0092      	lsls	r2, r2, #2
 800174a:	4093      	lsls	r3, r2
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001752:	493b      	ldr	r1, [pc, #236]	; (8001840 <HAL_GPIO_Init+0x2e0>)
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	089b      	lsrs	r3, r3, #2
 8001758:	3302      	adds	r3, #2
 800175a:	68fa      	ldr	r2, [r7, #12]
 800175c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d006      	beq.n	800177a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800176c:	4b38      	ldr	r3, [pc, #224]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	4937      	ldr	r1, [pc, #220]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 8001772:	69bb      	ldr	r3, [r7, #24]
 8001774:	4313      	orrs	r3, r2
 8001776:	600b      	str	r3, [r1, #0]
 8001778:	e006      	b.n	8001788 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800177a:	4b35      	ldr	r3, [pc, #212]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	43db      	mvns	r3, r3
 8001782:	4933      	ldr	r1, [pc, #204]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 8001784:	4013      	ands	r3, r2
 8001786:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d006      	beq.n	80017a2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001794:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 8001796:	685a      	ldr	r2, [r3, #4]
 8001798:	492d      	ldr	r1, [pc, #180]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017a4:	685a      	ldr	r2, [r3, #4]
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	43db      	mvns	r3, r3
 80017aa:	4929      	ldr	r1, [pc, #164]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d006      	beq.n	80017ca <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017bc:	4b24      	ldr	r3, [pc, #144]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	4923      	ldr	r1, [pc, #140]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
 80017c8:	e006      	b.n	80017d8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017ca:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017cc:	689a      	ldr	r2, [r3, #8]
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	491f      	ldr	r1, [pc, #124]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d006      	beq.n	80017f2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017e4:	4b1a      	ldr	r3, [pc, #104]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017e6:	68da      	ldr	r2, [r3, #12]
 80017e8:	4919      	ldr	r1, [pc, #100]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017ea:	69bb      	ldr	r3, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	60cb      	str	r3, [r1, #12]
 80017f0:	e006      	b.n	8001800 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80017f2:	4b17      	ldr	r3, [pc, #92]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	4915      	ldr	r1, [pc, #84]	; (8001850 <HAL_GPIO_Init+0x2f0>)
 80017fc:	4013      	ands	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001802:	3301      	adds	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	fa22 f303 	lsr.w	r3, r2, r3
 8001810:	2b00      	cmp	r3, #0
 8001812:	f47f aeaf 	bne.w	8001574 <HAL_GPIO_Init+0x14>
  }
}
 8001816:	bf00      	nop
 8001818:	bf00      	nop
 800181a:	372c      	adds	r7, #44	; 0x2c
 800181c:	46bd      	mov	sp, r7
 800181e:	bc80      	pop	{r7}
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	10320000 	.word	0x10320000
 8001828:	10310000 	.word	0x10310000
 800182c:	10220000 	.word	0x10220000
 8001830:	10210000 	.word	0x10210000
 8001834:	10120000 	.word	0x10120000
 8001838:	10110000 	.word	0x10110000
 800183c:	40021000 	.word	0x40021000
 8001840:	40010000 	.word	0x40010000
 8001844:	40010800 	.word	0x40010800
 8001848:	40010c00 	.word	0x40010c00
 800184c:	40011000 	.word	0x40011000
 8001850:	40010400 	.word	0x40010400

08001854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001854:	b480      	push	{r7}
 8001856:	b085      	sub	sp, #20
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	4013      	ands	r3, r2
 8001868:	2b00      	cmp	r3, #0
 800186a:	d002      	beq.n	8001872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
 8001870:	e001      	b.n	8001876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001876:	7bfb      	ldrb	r3, [r7, #15]
}
 8001878:	4618      	mov	r0, r3
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001882:	b480      	push	{r7}
 8001884:	b083      	sub	sp, #12
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	807b      	strh	r3, [r7, #2]
 800188e:	4613      	mov	r3, r2
 8001890:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001892:	787b      	ldrb	r3, [r7, #1]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d003      	beq.n	80018a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001898:	887a      	ldrh	r2, [r7, #2]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800189e:	e003      	b.n	80018a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80018a0:	887b      	ldrh	r3, [r7, #2]
 80018a2:	041a      	lsls	r2, r3, #16
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	611a      	str	r2, [r3, #16]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
 80018ba:	460b      	mov	r3, r1
 80018bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018c4:	887a      	ldrh	r2, [r7, #2]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	041a      	lsls	r2, r3, #16
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	887b      	ldrh	r3, [r7, #2]
 80018d2:	400b      	ands	r3, r1
 80018d4:	431a      	orrs	r2, r3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	611a      	str	r2, [r3, #16]
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr

080018e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e26c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0301 	and.w	r3, r3, #1
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f000 8087 	beq.w	8001a12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001904:	4b92      	ldr	r3, [pc, #584]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 030c 	and.w	r3, r3, #12
 800190c:	2b04      	cmp	r3, #4
 800190e:	d00c      	beq.n	800192a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001910:	4b8f      	ldr	r3, [pc, #572]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f003 030c 	and.w	r3, r3, #12
 8001918:	2b08      	cmp	r3, #8
 800191a:	d112      	bne.n	8001942 <HAL_RCC_OscConfig+0x5e>
 800191c:	4b8c      	ldr	r3, [pc, #560]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	d10b      	bne.n	8001942 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800192a:	4b89      	ldr	r3, [pc, #548]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d06c      	beq.n	8001a10 <HAL_RCC_OscConfig+0x12c>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d168      	bne.n	8001a10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e246      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800194a:	d106      	bne.n	800195a <HAL_RCC_OscConfig+0x76>
 800194c:	4b80      	ldr	r3, [pc, #512]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a7f      	ldr	r2, [pc, #508]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001952:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	e02e      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0x98>
 8001962:	4b7b      	ldr	r3, [pc, #492]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a7a      	ldr	r2, [pc, #488]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b78      	ldr	r3, [pc, #480]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a77      	ldr	r2, [pc, #476]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001974:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e01d      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001984:	d10c      	bne.n	80019a0 <HAL_RCC_OscConfig+0xbc>
 8001986:	4b72      	ldr	r3, [pc, #456]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a71      	ldr	r2, [pc, #452]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	4b6f      	ldr	r3, [pc, #444]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a6e      	ldr	r2, [pc, #440]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800199c:	6013      	str	r3, [r2, #0]
 800199e:	e00b      	b.n	80019b8 <HAL_RCC_OscConfig+0xd4>
 80019a0:	4b6b      	ldr	r3, [pc, #428]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a6a      	ldr	r2, [pc, #424]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019aa:	6013      	str	r3, [r2, #0]
 80019ac:	4b68      	ldr	r3, [pc, #416]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a67      	ldr	r2, [pc, #412]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fcb6 	bl	8001330 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c6:	e008      	b.n	80019da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c8:	f7ff fcb2 	bl	8001330 <HAL_GetTick>
 80019cc:	4602      	mov	r2, r0
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	1ad3      	subs	r3, r2, r3
 80019d2:	2b64      	cmp	r3, #100	; 0x64
 80019d4:	d901      	bls.n	80019da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e1fa      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019da:	4b5d      	ldr	r3, [pc, #372]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d0f0      	beq.n	80019c8 <HAL_RCC_OscConfig+0xe4>
 80019e6:	e014      	b.n	8001a12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e8:	f7ff fca2 	bl	8001330 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f0:	f7ff fc9e 	bl	8001330 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b64      	cmp	r3, #100	; 0x64
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e1e6      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a02:	4b53      	ldr	r3, [pc, #332]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1f0      	bne.n	80019f0 <HAL_RCC_OscConfig+0x10c>
 8001a0e:	e000      	b.n	8001a12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d063      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1e:	4b4c      	ldr	r3, [pc, #304]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a2a:	4b49      	ldr	r3, [pc, #292]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 030c 	and.w	r3, r3, #12
 8001a32:	2b08      	cmp	r3, #8
 8001a34:	d11c      	bne.n	8001a70 <HAL_RCC_OscConfig+0x18c>
 8001a36:	4b46      	ldr	r3, [pc, #280]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d116      	bne.n	8001a70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a42:	4b43      	ldr	r3, [pc, #268]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d005      	beq.n	8001a5a <HAL_RCC_OscConfig+0x176>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e1ba      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b3d      	ldr	r3, [pc, #244]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4939      	ldr	r1, [pc, #228]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d020      	beq.n	8001aba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a78:	4b36      	ldr	r3, [pc, #216]	; (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7e:	f7ff fc57 	bl	8001330 <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a84:	e008      	b.n	8001a98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a86:	f7ff fc53 	bl	8001330 <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e19b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	4b2d      	ldr	r3, [pc, #180]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa4:	4b2a      	ldr	r3, [pc, #168]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	00db      	lsls	r3, r3, #3
 8001ab2:	4927      	ldr	r1, [pc, #156]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	600b      	str	r3, [r1, #0]
 8001ab8:	e015      	b.n	8001ae6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aba:	4b26      	ldr	r3, [pc, #152]	; (8001b54 <HAL_RCC_OscConfig+0x270>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fc36 	bl	8001330 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fc32 	bl	8001330 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e17a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03a      	beq.n	8001b68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d019      	beq.n	8001b2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b17      	ldr	r3, [pc, #92]	; (8001b58 <HAL_RCC_OscConfig+0x274>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b00:	f7ff fc16 	bl	8001330 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b08:	f7ff fc12 	bl	8001330 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e15a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f0      	beq.n	8001b08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b26:	2001      	movs	r0, #1
 8001b28:	f000 faa6 	bl	8002078 <RCC_Delay>
 8001b2c:	e01c      	b.n	8001b68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_RCC_OscConfig+0x274>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b34:	f7ff fbfc 	bl	8001330 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b3a:	e00f      	b.n	8001b5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fbf8 	bl	8001330 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d908      	bls.n	8001b5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e140      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	42420000 	.word	0x42420000
 8001b58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b5c:	4b9e      	ldr	r3, [pc, #632]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1e9      	bne.n	8001b3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a6 	beq.w	8001cc2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b76:	2300      	movs	r3, #0
 8001b78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b7a:	4b97      	ldr	r3, [pc, #604]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10d      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	4b94      	ldr	r3, [pc, #592]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	4a93      	ldr	r2, [pc, #588]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b90:	61d3      	str	r3, [r2, #28]
 8001b92:	4b91      	ldr	r3, [pc, #580]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001b94:	69db      	ldr	r3, [r3, #28]
 8001b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9a:	60bb      	str	r3, [r7, #8]
 8001b9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba2:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d118      	bne.n	8001be0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bae:	4b8b      	ldr	r3, [pc, #556]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a8a      	ldr	r2, [pc, #552]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bba:	f7ff fbb9 	bl	8001330 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc2:	f7ff fbb5 	bl	8001330 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b64      	cmp	r3, #100	; 0x64
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e0fd      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bd4:	4b81      	ldr	r3, [pc, #516]	; (8001ddc <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d106      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x312>
 8001be8:	4b7b      	ldr	r3, [pc, #492]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a7a      	ldr	r2, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	6213      	str	r3, [r2, #32]
 8001bf4:	e02d      	b.n	8001c52 <HAL_RCC_OscConfig+0x36e>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d10c      	bne.n	8001c18 <HAL_RCC_OscConfig+0x334>
 8001bfe:	4b76      	ldr	r3, [pc, #472]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c00:	6a1b      	ldr	r3, [r3, #32]
 8001c02:	4a75      	ldr	r2, [pc, #468]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	6213      	str	r3, [r2, #32]
 8001c0a:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	f023 0304 	bic.w	r3, r3, #4
 8001c14:	6213      	str	r3, [r2, #32]
 8001c16:	e01c      	b.n	8001c52 <HAL_RCC_OscConfig+0x36e>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	2b05      	cmp	r3, #5
 8001c1e:	d10c      	bne.n	8001c3a <HAL_RCC_OscConfig+0x356>
 8001c20:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c22:	6a1b      	ldr	r3, [r3, #32]
 8001c24:	4a6c      	ldr	r2, [pc, #432]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c26:	f043 0304 	orr.w	r3, r3, #4
 8001c2a:	6213      	str	r3, [r2, #32]
 8001c2c:	4b6a      	ldr	r3, [pc, #424]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c32:	f043 0301 	orr.w	r3, r3, #1
 8001c36:	6213      	str	r3, [r2, #32]
 8001c38:	e00b      	b.n	8001c52 <HAL_RCC_OscConfig+0x36e>
 8001c3a:	4b67      	ldr	r3, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	4a66      	ldr	r2, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6213      	str	r3, [r2, #32]
 8001c46:	4b64      	ldr	r3, [pc, #400]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c4c:	f023 0304 	bic.w	r3, r3, #4
 8001c50:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d015      	beq.n	8001c86 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb69 	bl	8001330 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c60:	e00a      	b.n	8001c78 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c62:	f7ff fb65 	bl	8001330 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e0ab      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	4b57      	ldr	r3, [pc, #348]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ee      	beq.n	8001c62 <HAL_RCC_OscConfig+0x37e>
 8001c84:	e014      	b.n	8001cb0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7ff fb53 	bl	8001330 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7ff fb4f 	bl	8001330 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e095      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca4:	4b4c      	ldr	r3, [pc, #304]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d1ee      	bne.n	8001c8e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d105      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	4a47      	ldr	r2, [pc, #284]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001cbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	f000 8081 	beq.w	8001dce <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ccc:	4b42      	ldr	r3, [pc, #264]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f003 030c 	and.w	r3, r3, #12
 8001cd4:	2b08      	cmp	r3, #8
 8001cd6:	d061      	beq.n	8001d9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d146      	bne.n	8001d6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_OscConfig+0x4fc>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce6:	f7ff fb23 	bl	8001330 <HAL_GetTick>
 8001cea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cee:	f7ff fb1f 	bl	8001330 <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e067      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1f0      	bne.n	8001cee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d14:	d108      	bne.n	8001d28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d16:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	492d      	ldr	r1, [pc, #180]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d28:	4b2b      	ldr	r3, [pc, #172]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6a19      	ldr	r1, [r3, #32]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	4927      	ldr	r1, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d40:	4b27      	ldr	r3, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x4fc>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d46:	f7ff faf3 	bl	8001330 <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff faef 	bl	8001330 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e037      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d60:	4b1d      	ldr	r3, [pc, #116]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f0      	beq.n	8001d4e <HAL_RCC_OscConfig+0x46a>
 8001d6c:	e02f      	b.n	8001dce <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6e:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_RCC_OscConfig+0x4fc>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d74:	f7ff fadc 	bl	8001330 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7ff fad8 	bl	8001330 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e020      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x498>
 8001d9a:	e018      	b.n	8001dce <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69db      	ldr	r3, [r3, #28]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e013      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x4f4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d106      	bne.n	8001dca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42420060 	.word	0x42420060

08001de4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d0      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df8:	4b6a      	ldr	r3, [pc, #424]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d910      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f023 0207 	bic.w	r2, r3, #7
 8001e0e:	4965      	ldr	r1, [pc, #404]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d001      	beq.n	8001e28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e0b8      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d020      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d005      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e40:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a58      	ldr	r2, [pc, #352]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0308 	and.w	r3, r3, #8
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e58:	4b53      	ldr	r3, [pc, #332]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	4a52      	ldr	r2, [pc, #328]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e64:	4b50      	ldr	r3, [pc, #320]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	494d      	ldr	r1, [pc, #308]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d040      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d107      	bne.n	8001e9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d115      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e07f      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d107      	bne.n	8001eb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea2:	4b41      	ldr	r3, [pc, #260]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d109      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e073      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb2:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f003 0302 	and.w	r3, r3, #2
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e06b      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f023 0203 	bic.w	r2, r3, #3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	4936      	ldr	r1, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed4:	f7ff fa2c 	bl	8001330 <HAL_GetTick>
 8001ed8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eda:	e00a      	b.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001edc:	f7ff fa28 	bl	8001330 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e053      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	4b2d      	ldr	r3, [pc, #180]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 020c 	and.w	r2, r3, #12
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d1eb      	bne.n	8001edc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f04:	4b27      	ldr	r3, [pc, #156]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d210      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4922      	ldr	r1, [pc, #136]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e032      	b.n	8001f9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d008      	beq.n	8001f52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4916      	ldr	r1, [pc, #88]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d009      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f72:	f000 f821 	bl	8001fb8 <HAL_RCC_GetSysClockFreq>
 8001f76:	4602      	mov	r2, r0
 8001f78:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 030f 	and.w	r3, r3, #15
 8001f82:	490a      	ldr	r1, [pc, #40]	; (8001fac <HAL_RCC_ClockConfig+0x1c8>)
 8001f84:	5ccb      	ldrb	r3, [r1, r3]
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a09      	ldr	r2, [pc, #36]	; (8001fb0 <HAL_RCC_ClockConfig+0x1cc>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f8e:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <HAL_RCC_ClockConfig+0x1d0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff f98a 	bl	80012ac <HAL_InitTick>

  return HAL_OK;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	080029b0 	.word	0x080029b0
 8001fb0:	2000003c 	.word	0x2000003c
 8001fb4:	20000040 	.word	0x20000040

08001fb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb8:	b490      	push	{r4, r7}
 8001fba:	b08a      	sub	sp, #40	; 0x28
 8001fbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fbe:	4b2a      	ldr	r3, [pc, #168]	; (8002068 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fc0:	1d3c      	adds	r4, r7, #4
 8001fc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001fc8:	f240 2301 	movw	r3, #513	; 0x201
 8001fcc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61fb      	str	r3, [r7, #28]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61bb      	str	r3, [r7, #24]
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
 8001fda:	2300      	movs	r3, #0
 8001fdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001fe2:	4b22      	ldr	r3, [pc, #136]	; (800206c <HAL_RCC_GetSysClockFreq+0xb4>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x46>
 8001ff6:	e02d      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffa:	623b      	str	r3, [r7, #32]
      break;
 8001ffc:	e02d      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	0c9b      	lsrs	r3, r3, #18
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800200a:	4413      	add	r3, r2
 800200c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002010:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800201c:	4b13      	ldr	r3, [pc, #76]	; (800206c <HAL_RCC_GetSysClockFreq+0xb4>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	0c5b      	lsrs	r3, r3, #17
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800202a:	4413      	add	r3, r2
 800202c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002030:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002036:	fb02 f203 	mul.w	r2, r2, r3
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
 8002042:	e004      	b.n	800204e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4a0b      	ldr	r2, [pc, #44]	; (8002074 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	623b      	str	r3, [r7, #32]
      break;
 8002052:	e002      	b.n	800205a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002056:	623b      	str	r3, [r7, #32]
      break;
 8002058:	bf00      	nop
    }
  }
  return sysclockfreq;
 800205a:	6a3b      	ldr	r3, [r7, #32]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3728      	adds	r7, #40	; 0x28
 8002060:	46bd      	mov	sp, r7
 8002062:	bc90      	pop	{r4, r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	080029a0 	.word	0x080029a0
 800206c:	40021000 	.word	0x40021000
 8002070:	007a1200 	.word	0x007a1200
 8002074:	003d0900 	.word	0x003d0900

08002078 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <RCC_Delay+0x34>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <RCC_Delay+0x38>)
 8002086:	fba2 2303 	umull	r2, r3, r2, r3
 800208a:	0a5b      	lsrs	r3, r3, #9
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	fb02 f303 	mul.w	r3, r2, r3
 8002092:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002094:	bf00      	nop
  }
  while (Delay --);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1e5a      	subs	r2, r3, #1
 800209a:	60fa      	str	r2, [r7, #12]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d1f9      	bne.n	8002094 <RCC_Delay+0x1c>
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3714      	adds	r7, #20
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr
 80020ac:	2000003c 	.word	0x2000003c
 80020b0:	10624dd3 	.word	0x10624dd3

080020b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d101      	bne.n	80020c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e041      	b.n	800214a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d106      	bne.n	80020e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff f84e 	bl	800117c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2202      	movs	r2, #2
 80020e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	3304      	adds	r3, #4
 80020f0:	4619      	mov	r1, r3
 80020f2:	4610      	mov	r0, r2
 80020f4:	f000 fa6a 	bl	80025cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2201      	movs	r2, #1
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b01      	cmp	r3, #1
 8002166:	d001      	beq.n	800216c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e035      	b.n	80021d8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2202      	movs	r2, #2
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f042 0201 	orr.w	r2, r2, #1
 8002182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a16      	ldr	r2, [pc, #88]	; (80021e4 <HAL_TIM_Base_Start_IT+0x90>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_TIM_Base_Start_IT+0x4e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002196:	d004      	beq.n	80021a2 <HAL_TIM_Base_Start_IT+0x4e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <HAL_TIM_Base_Start_IT+0x94>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d111      	bne.n	80021c6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 0307 	and.w	r3, r3, #7
 80021ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2b06      	cmp	r3, #6
 80021b2:	d010      	beq.n	80021d6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021c4:	e007      	b.n	80021d6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f042 0201 	orr.w	r2, r2, #1
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40012c00 	.word	0x40012c00
 80021e8:	40000400 	.word	0x40000400

080021ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d122      	bne.n	8002248 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b02      	cmp	r3, #2
 800220e:	d11b      	bne.n	8002248 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f06f 0202 	mvn.w	r2, #2
 8002218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	f000 f9b1 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002234:	e005      	b.n	8002242 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f9a4 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f9b3 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b04      	cmp	r3, #4
 8002254:	d122      	bne.n	800229c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	f003 0304 	and.w	r3, r3, #4
 8002260:	2b04      	cmp	r3, #4
 8002262:	d11b      	bne.n	800229c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f06f 0204 	mvn.w	r2, #4
 800226c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2202      	movs	r2, #2
 8002272:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	699b      	ldr	r3, [r3, #24]
 800227a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f000 f987 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002288:	e005      	b.n	8002296 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 f97a 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f989 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	f003 0308 	and.w	r3, r3, #8
 80022a6:	2b08      	cmp	r3, #8
 80022a8:	d122      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	f003 0308 	and.w	r3, r3, #8
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d11b      	bne.n	80022f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f06f 0208 	mvn.w	r2, #8
 80022c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2204      	movs	r2, #4
 80022c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 0303 	and.w	r3, r3, #3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f000 f95d 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 80022dc:	e005      	b.n	80022ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 f950 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f000 f95f 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	f003 0310 	and.w	r3, r3, #16
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d122      	bne.n	8002344 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b10      	cmp	r3, #16
 800230a:	d11b      	bne.n	8002344 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 0210 	mvn.w	r2, #16
 8002314:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2208      	movs	r2, #8
 800231a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f000 f933 	bl	8002596 <HAL_TIM_IC_CaptureCallback>
 8002330:	e005      	b.n	800233e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 f926 	bl	8002584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f000 f935 	bl	80025a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d10e      	bne.n	8002370 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68db      	ldr	r3, [r3, #12]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d107      	bne.n	8002370 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0201 	mvn.w	r2, #1
 8002368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fe04 	bl	8000f78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237a:	2b80      	cmp	r3, #128	; 0x80
 800237c:	d10e      	bne.n	800239c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002388:	2b80      	cmp	r3, #128	; 0x80
 800238a:	d107      	bne.n	800239c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002394:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 fa67 	bl	800286a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691b      	ldr	r3, [r3, #16]
 80023a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023a6:	2b40      	cmp	r3, #64	; 0x40
 80023a8:	d10e      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b4:	2b40      	cmp	r3, #64	; 0x40
 80023b6:	d107      	bne.n	80023c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 f8f9 	bl	80025ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d10e      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	f003 0320 	and.w	r3, r3, #32
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d107      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f06f 0220 	mvn.w	r2, #32
 80023ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa32 	bl	8002858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	bf00      	nop
 80023f6:	3708      	adds	r7, #8
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_TIM_ConfigClockSource+0x18>
 8002410:	2302      	movs	r3, #2
 8002412:	e0b3      	b.n	800257c <HAL_TIM_ConfigClockSource+0x180>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2202      	movs	r2, #2
 8002420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002432:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800243a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68fa      	ldr	r2, [r7, #12]
 8002442:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800244c:	d03e      	beq.n	80024cc <HAL_TIM_ConfigClockSource+0xd0>
 800244e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002452:	f200 8087 	bhi.w	8002564 <HAL_TIM_ConfigClockSource+0x168>
 8002456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245a:	f000 8085 	beq.w	8002568 <HAL_TIM_ConfigClockSource+0x16c>
 800245e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002462:	d87f      	bhi.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
 8002464:	2b70      	cmp	r3, #112	; 0x70
 8002466:	d01a      	beq.n	800249e <HAL_TIM_ConfigClockSource+0xa2>
 8002468:	2b70      	cmp	r3, #112	; 0x70
 800246a:	d87b      	bhi.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
 800246c:	2b60      	cmp	r3, #96	; 0x60
 800246e:	d050      	beq.n	8002512 <HAL_TIM_ConfigClockSource+0x116>
 8002470:	2b60      	cmp	r3, #96	; 0x60
 8002472:	d877      	bhi.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
 8002474:	2b50      	cmp	r3, #80	; 0x50
 8002476:	d03c      	beq.n	80024f2 <HAL_TIM_ConfigClockSource+0xf6>
 8002478:	2b50      	cmp	r3, #80	; 0x50
 800247a:	d873      	bhi.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
 800247c:	2b40      	cmp	r3, #64	; 0x40
 800247e:	d058      	beq.n	8002532 <HAL_TIM_ConfigClockSource+0x136>
 8002480:	2b40      	cmp	r3, #64	; 0x40
 8002482:	d86f      	bhi.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
 8002484:	2b30      	cmp	r3, #48	; 0x30
 8002486:	d064      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x156>
 8002488:	2b30      	cmp	r3, #48	; 0x30
 800248a:	d86b      	bhi.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
 800248c:	2b20      	cmp	r3, #32
 800248e:	d060      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x156>
 8002490:	2b20      	cmp	r3, #32
 8002492:	d867      	bhi.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
 8002494:	2b00      	cmp	r3, #0
 8002496:	d05c      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x156>
 8002498:	2b10      	cmp	r3, #16
 800249a:	d05a      	beq.n	8002552 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800249c:	e062      	b.n	8002564 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6818      	ldr	r0, [r3, #0]
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	6899      	ldr	r1, [r3, #8]
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f000 f95c 	bl	800276a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80024c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	68fa      	ldr	r2, [r7, #12]
 80024c8:	609a      	str	r2, [r3, #8]
      break;
 80024ca:	e04e      	b.n	800256a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	6899      	ldr	r1, [r3, #8]
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f000 f945 	bl	800276a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80024ee:	609a      	str	r2, [r3, #8]
      break;
 80024f0:	e03b      	b.n	800256a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6818      	ldr	r0, [r3, #0]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	6859      	ldr	r1, [r3, #4]
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	461a      	mov	r2, r3
 8002500:	f000 f8bc 	bl	800267c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2150      	movs	r1, #80	; 0x50
 800250a:	4618      	mov	r0, r3
 800250c:	f000 f913 	bl	8002736 <TIM_ITRx_SetConfig>
      break;
 8002510:	e02b      	b.n	800256a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6818      	ldr	r0, [r3, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	6859      	ldr	r1, [r3, #4]
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	461a      	mov	r2, r3
 8002520:	f000 f8da 	bl	80026d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2160      	movs	r1, #96	; 0x60
 800252a:	4618      	mov	r0, r3
 800252c:	f000 f903 	bl	8002736 <TIM_ITRx_SetConfig>
      break;
 8002530:	e01b      	b.n	800256a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6818      	ldr	r0, [r3, #0]
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	461a      	mov	r2, r3
 8002540:	f000 f89c 	bl	800267c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2140      	movs	r1, #64	; 0x40
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f8f3 	bl	8002736 <TIM_ITRx_SetConfig>
      break;
 8002550:	e00b      	b.n	800256a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4619      	mov	r1, r3
 800255c:	4610      	mov	r0, r2
 800255e:	f000 f8ea 	bl	8002736 <TIM_ITRx_SetConfig>
        break;
 8002562:	e002      	b.n	800256a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002564:	bf00      	nop
 8002566:	e000      	b.n	800256a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002568:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3710      	adds	r7, #16
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bc80      	pop	{r7}
 80025a6:	4770      	bx	lr

080025a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr

080025cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	4a25      	ldr	r2, [pc, #148]	; (8002674 <TIM_Base_SetConfig+0xa8>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d007      	beq.n	80025f4 <TIM_Base_SetConfig+0x28>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d003      	beq.n	80025f4 <TIM_Base_SetConfig+0x28>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	4a22      	ldr	r2, [pc, #136]	; (8002678 <TIM_Base_SetConfig+0xac>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d108      	bne.n	8002606 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4313      	orrs	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a1a      	ldr	r2, [pc, #104]	; (8002674 <TIM_Base_SetConfig+0xa8>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d007      	beq.n	800261e <TIM_Base_SetConfig+0x52>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d003      	beq.n	800261e <TIM_Base_SetConfig+0x52>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a17      	ldr	r2, [pc, #92]	; (8002678 <TIM_Base_SetConfig+0xac>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d108      	bne.n	8002630 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	689a      	ldr	r2, [r3, #8]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4a07      	ldr	r2, [pc, #28]	; (8002674 <TIM_Base_SetConfig+0xa8>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d103      	bne.n	8002664 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	691a      	ldr	r2, [r3, #16]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	615a      	str	r2, [r3, #20]
}
 800266a:	bf00      	nop
 800266c:	3714      	adds	r7, #20
 800266e:	46bd      	mov	sp, r7
 8002670:	bc80      	pop	{r7}
 8002672:	4770      	bx	lr
 8002674:	40012c00 	.word	0x40012c00
 8002678:	40000400 	.word	0x40000400

0800267c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800267c:	b480      	push	{r7}
 800267e:	b087      	sub	sp, #28
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6a1b      	ldr	r3, [r3, #32]
 800268c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	f023 0201 	bic.w	r2, r3, #1
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f023 030a 	bic.w	r3, r3, #10
 80026b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	4313      	orrs	r3, r2
 80026c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	621a      	str	r2, [r3, #32]
}
 80026ce:	bf00      	nop
 80026d0:	371c      	adds	r7, #28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bc80      	pop	{r7}
 80026d6:	4770      	bx	lr

080026d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	60f8      	str	r0, [r7, #12]
 80026e0:	60b9      	str	r1, [r7, #8]
 80026e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	6a1b      	ldr	r3, [r3, #32]
 80026e8:	f023 0210 	bic.w	r2, r3, #16
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002702:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	031b      	lsls	r3, r3, #12
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4313      	orrs	r3, r2
 800270c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002714:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	4313      	orrs	r3, r2
 800271e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	621a      	str	r2, [r3, #32]
}
 800272c:	bf00      	nop
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr

08002736 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002736:	b480      	push	{r7}
 8002738:	b085      	sub	sp, #20
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800274c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800274e:	683a      	ldr	r2, [r7, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	4313      	orrs	r3, r2
 8002754:	f043 0307 	orr.w	r3, r3, #7
 8002758:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	609a      	str	r2, [r3, #8]
}
 8002760:	bf00      	nop
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800276a:	b480      	push	{r7}
 800276c:	b087      	sub	sp, #28
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	607a      	str	r2, [r7, #4]
 8002776:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002784:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	021a      	lsls	r2, r3, #8
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	431a      	orrs	r2, r3
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	4313      	orrs	r3, r2
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	609a      	str	r2, [r3, #8]
}
 800279e:	bf00      	nop
 80027a0:	371c      	adds	r7, #28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bc80      	pop	{r7}
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d101      	bne.n	80027c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027bc:	2302      	movs	r3, #2
 80027be:	e041      	b.n	8002844 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68fa      	ldr	r2, [r7, #12]
 80027f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a14      	ldr	r2, [pc, #80]	; (8002850 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d009      	beq.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d004      	beq.n	8002818 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a10      	ldr	r2, [pc, #64]	; (8002854 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d10c      	bne.n	8002832 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800281e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	4313      	orrs	r3, r2
 8002828:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002842:	2300      	movs	r3, #0
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40012c00 	.word	0x40012c00
 8002854:	40000400 	.word	0x40000400

08002858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	bc80      	pop	{r7}
 8002868:	4770      	bx	lr

0800286a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr

0800287c <__libc_init_array>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	2600      	movs	r6, #0
 8002880:	4d0c      	ldr	r5, [pc, #48]	; (80028b4 <__libc_init_array+0x38>)
 8002882:	4c0d      	ldr	r4, [pc, #52]	; (80028b8 <__libc_init_array+0x3c>)
 8002884:	1b64      	subs	r4, r4, r5
 8002886:	10a4      	asrs	r4, r4, #2
 8002888:	42a6      	cmp	r6, r4
 800288a:	d109      	bne.n	80028a0 <__libc_init_array+0x24>
 800288c:	f000 f822 	bl	80028d4 <_init>
 8002890:	2600      	movs	r6, #0
 8002892:	4d0a      	ldr	r5, [pc, #40]	; (80028bc <__libc_init_array+0x40>)
 8002894:	4c0a      	ldr	r4, [pc, #40]	; (80028c0 <__libc_init_array+0x44>)
 8002896:	1b64      	subs	r4, r4, r5
 8002898:	10a4      	asrs	r4, r4, #2
 800289a:	42a6      	cmp	r6, r4
 800289c:	d105      	bne.n	80028aa <__libc_init_array+0x2e>
 800289e:	bd70      	pop	{r4, r5, r6, pc}
 80028a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80028a4:	4798      	blx	r3
 80028a6:	3601      	adds	r6, #1
 80028a8:	e7ee      	b.n	8002888 <__libc_init_array+0xc>
 80028aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ae:	4798      	blx	r3
 80028b0:	3601      	adds	r6, #1
 80028b2:	e7f2      	b.n	800289a <__libc_init_array+0x1e>
 80028b4:	080029c0 	.word	0x080029c0
 80028b8:	080029c0 	.word	0x080029c0
 80028bc:	080029c0 	.word	0x080029c0
 80028c0:	080029c4 	.word	0x080029c4

080028c4 <memset>:
 80028c4:	4603      	mov	r3, r0
 80028c6:	4402      	add	r2, r0
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d100      	bne.n	80028ce <memset+0xa>
 80028cc:	4770      	bx	lr
 80028ce:	f803 1b01 	strb.w	r1, [r3], #1
 80028d2:	e7f9      	b.n	80028c8 <memset+0x4>

080028d4 <_init>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	bf00      	nop
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr

080028e0 <_fini>:
 80028e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028e2:	bf00      	nop
 80028e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e6:	bc08      	pop	{r3}
 80028e8:	469e      	mov	lr, r3
 80028ea:	4770      	bx	lr
